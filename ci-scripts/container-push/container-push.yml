---
# other than installing docker, need to install docker-python and ansible
# also need to start docker


# This playbook can be used to download the container images which
# passed CI and tag them back to rdoproject registry.
# It will also mirror the images to docker.io.
# When using it from downstream purpose, update
# the registry_host with correct registry name
# Set registry_host to quay.io when using quay
- name: Download and repush container images
  hosts: localhost
  vars:
    registry_host: docker.io
    tmp_file_root: "/var/tmp/promoter_logs"
    # It contains all the required registry metadata
    target_registries_group:
      docker:
        host: "{{ registry_host }}"
        namespace: "{{ target_namespace }}"
        username: "{{ lookup('env','DOCKERHUB_USERNAME') }}"
        password: "{{ lookup('env','DOCKERHUB_PASSWORD') }}"
        auth_url: "https://index.{{ registry_host }}/v1/"
        schema: "v2_s2"
      quay_rdoproject:
        host: "quay.rdoproject.org"
        namespace: "{{ target_namespace }}"
        username: "{{ target_namespace }}+cirobot"
        password: "{{ lookup('env', target_namespace + '_PASSWORD') }}"
        auth_url: "https://index.{{ registry_host }}/v1/"
        schema: "v2_s2"
      quay:
        host: "quay.io"
        namespace: "{{ target_namespace }}"
        username: "{{ lookup('env','QUAYDOTIO_USERNAME') }}"
        password: "{{ lookup('env','QUAYDOTIO_PASSWORD') }}"
        token: "{{ lookup('env','QUAYDOTIO_TOKEN') }}"
        auth_url: "https://{{ registry_host }}/api/v1/'"
        schema: "v2_s1"
      downstream:
        host: "{{ registry_host }}"
        namespace: "tripleo{{ lookup('env','RELEASE') }}"
        username: "{{ lookup('env','UPSHIFT_USERNAME') }}"
        password: "{{ lookup('env','UPSHIFT_PASSWORD') }}"
        auth_url: "https://{{ registry_host }}/v2/"
        schema: "v2_s1"
    # Add the list of registries we want to enable from
    # target_registries_group
    target_registries_to_enable: >-
      {%- if (release not in ["victoria"] and distro_name in ["centos"]) -%}
      quay
      {%- else -%}
      docker
      {%- endif -%}

  tasks:

    - name: Generate target registries to push containers to multiple registries
      no_log: true
      set_fact:
        target_registries: "{{ target_registries | default([]) + [target_registries_group[item]] }}"
      with_items: "{{ target_registries_to_enable }}"

    # This same playbook will run in both production and testing.
    # If we are running in production we'll use the vars above.
    # If we are in testing we'll have to use the information provided by the staging setup
    # The most effective way for this playbook to understand that it's running in testing
    # is to check if a stage-info.yaml exists, then source and use its values.
    - name: stat stage-info file
      stat:
        path: "/tmp/stage-info.yaml"
      register: stage_info_stat

    - name: Override vars if running under tests
      when: stage_info_stat.stat.exists
      block:
        - name: Include info from staging environment
          # Setting no_log as this can potentially expose passwords
          no_log: true
          include_vars:
            file: "/tmp/stage-info.yaml"
            name: stage_info

        - name: "make sure {{ tmp_file_root }} exists"
          become: true
          file:
            path: "{{ tmp_file_root }}"
            state: directory
            owner: "{{ stage_info.main.promoter_user }}"
            group: "{{ stage_info.main.promoter_user }}"
            mode: u=rwx,g=rwx,o=rwx

        - name: override source registry if running under test
          # Setting no_log as this can potentially expose passwords
          no_log: true
          set_fact:
            source_registry: "{{ stage_info.registries.source }}"
            target_registries: "{{ stage_info.registries.targets }}"
            full_hash: "{{ stage_info.dlrn.promotions.promotion_candidate.full_hash }}"
            tmp_file_root: "{{ tmp_file_root }}"

    # TODO(gcerami) assert that the hash associated to promote_name in dlrn is
    # different from full_hash. If that happens it means that promoted_name was
    # promoted before pushing the containers, and it's an error
    # Print out the two hashes anyway
    - include_role:
        name: containers-promote
