---
- name: manifest create
  hosts: localhost
  become: yes
  become_user: root
  vars:
    registry_check_url: 'https://trunk.registry.rdoproject.org:8443/oapi/v1/namespaces/tripleomaster/imagestreamtags'
    containers_file: "parsed_containers-{{ distro_name }}-{{ distro_version }}-{{ lookup('env','RELEASE') }}.txt"
    dockerhub_namespace: "tripleo{{ lookup('env','RELEASE') }}"
    full_hash: "{{ lookup('env', 'FULL_HASH')}}"
    distro_name: "{{ lookup('env', 'DISTRO_NAME') }}"
    ppc_tag: "ppc64le"
    x86_tag: "x86_64"
  tasks:
    - name: register the containers list
      shell: >
        cat {{containers_file }}
      register: built_images

    - name: check if ppc tagged container exists in rdoproject registry
      get_url:
        url: "{{ registry_api_uri }}/{{ item }}:{{ full_hash }}_{{ ppc_tag }}"
        dest: "/tmp/"
        validate_certs: no
      register: check_ppc_containers
      retries: 3
      loop: "{{ built_images.stdout_lines }}"
      failed_when: false

    - debug:
        msg: "{{ item }} didn't exist on server"
      loop_control:
        index_var: index
      when: check_ppc_containers.results[index].status_code == 404
      loop: "{{  built_images.stdout_lines }}"

    # First create manifest for those containers built both in x86 and ppc
    - name: create and annotate manifests with containers in both x86 + ppc
      shell: >
        # docker manifest create masandreful/task1260:latest masandreful/task1260:latest_x86_64 masandreful/task1260:latest_ppc64le
        docker manifest create {{ dockerhub_namespace }}/{{ distro_name }}-binary-{{ item }}:{{ full_hash }} {{ dockerhub_namespace }}/{{ distro_name }}-binary-{{ item }}:{{ full_hash }}_{{ x86_tag }} {{ dockerhub_namespace }}/{{ distro_name }}-binary-{{ item }}:{{ full_hash }}_{{ ppc_tag }}
        # docker manifest annotate --arch ppc64le masandreful/task1260:latest masandreful/task1260:latest_ppc64le
        docker manifest annotate --arch amd64  {{ dockerhub_namespace }}/{{ distro_name }}-binary-{{ item }}:{{ full_hash }} {{ dockerhub_namespace }}/{{ distro_name }}-binary-{{ item }}:{{ full_hash }}_{{ x86_tag }}
        docker manifest annotate --arch {{ ppc_tag }}  {{ dockerhub_namespace }}/{{ distro_name }}-binary-{{ item }}:{{ full_hash }} {{ dockerhub_namespace }}/{{ distro_name }}-binary-{{ item }}:{{ full_hash }}_{{ ppc_tag }}
      loop_control:
        index_var: index
      loop: "{{ built_images.stdout_lines }}"
      when: check_ppc_containers.results[index].status_code != 404

    # Now create manifest for the rest of the x86 only containers
    - name: create and annotate manifests with the list of x86 only containers
      shell: >
        # docker manifest create masandreful/task1260:latest masandreful/task1260:latest_x86_64 masandreful/task1260:latest_x86_64
        docker manifest create {{ dockerhub_namespace }}/{{ distro_name }}-binary-{{ item }}:{{ full_hash }} {{ dockerhub_namespace }}/{{ distro_name }}-binary-{{ item }}:{{ full_hash }}_{{ x86_tag }}
        docker manifest annotate --arch amd64  {{ dockerhub_namespace }}/{{ distro_name }}-binary-{{ item }}:{{ full_hash }} {{ dockerhub_namespace }}/{{ distro_name }}-binary-{{ item }}:{{ full_hash }}_{{ x86_tag }}
      loop_control:
        index_var: index
      loop: "{{ built_images.stdout_lines }}"
      when: check_ppc_containers.results[index].status_code == 404

    - name: push container manifests
      shell: >
        export DOCKER_CLI_EXPERIMENTAL=enabled
        docker manifest push {{ dockerhub_namespace }}/{{ distro_name }}-binary-{{ item }}:{{ full_hash }}
      retries: 3
      with_items: "{{ built_images.stdout_lines }}"

