---
# Check if this is production or testing - testing when stage-info.yaml exists
- name: stat stage-info file
  stat:
    path: "/tmp/stage-info.yaml"
  register: stage_info_stat

- name: set ppc_manifests into stage-info.yaml when staging environment
  set_fact:
    ppc_pull_attempts: 3
  when: stage_info_stat.stat.exists

# When staging also set ppc_manifests into stage-info.yaml
- name: set ppc_manifests into stage-info.yaml when staging environment
  lineinfile:
    path: /tmp/stage-info.yaml
    line: "ppc_manifests: {{ ppc_manifests }}"
  when: stage_info_stat.stat.exists

- name: Copy ppc container inspect script
  template:
    src: generate_ppc_containers_list.sh.j2
    dest: "{{ tmp_file_root }}/generate_ppc_containers_list.sh"

- name: Generate list of ppc containers to push  # noqa 306
  command: "bash {{ tmp_file_root }}/generate_ppc_containers_list.sh"
  args:
    executable: /bin/bash
  changed_when: true
  when: manifest_push | bool

- name: check for missing containers
  stat:
    path: "{{ tmp_file_root }}/{{ missing_ppc_containers_file }}"
  register: missing_ppc_containers_stat

- name: Set ppc_manifests false if there are missing containers
  set_fact:
    ppc_manifests: false
    cacheable: yes
  when: missing_ppc_containers_stat.stat.size > 0

- name: "Pull ppc containers from {{ source_registry.host }}"
  when:
    - ppc_manifests | bool
  docker_image:
    name: "{{ source_registry.host }}/{{ source_registry.namespace }}/{{ item }}"
    tag: "{{ full_hash }}_{{ ppc_tag }}"
    source: pull
  loop: "{{ built_images.stdout_lines }}"
  retries: 3
  register: pulled_ppc
