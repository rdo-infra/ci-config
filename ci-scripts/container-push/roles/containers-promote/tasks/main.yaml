---

- name: print out hash, label and namespaces in play
  debug:
    var: "{{ item }}"
  with_items:
    - full_hash
    - named_label
    - source_registry.namespace
    - release

- name: Initialize list of pushed containers. Will be used for cleanup
  set_fact:
    pushed_containers: []

- name: "Create promoter log dir"
  file:
    path: "{{ tmp_file_root }}"
    state: directory

- name: Truncate containers file
  command: "truncate -s 0 {{ item }}"
  with_items:
    - "{{ tmp_file_root }}/{{ containers_file }}"
    - "{{ tmp_file_root }}/{{ missing_containers_file }}"
    - "{{ tmp_file_root }}/containers_pushed_list.txt"
    - "{{ tmp_file_root }}/containers_missed_list.txt"
    - "{{ tmp_file_root }}/{{ ppc_containers_file }}"
    - "{{ tmp_file_root }}/{{ missing_ppc_containers_file }}"
  changed_when: false

- name: Copy container inspect script
  template:
    src: generate_list.sh.j2
    dest: "{{ tmp_file_root }}/generate_list.sh"

- name: Generate list of containers to push  # noqa 306
  command: "bash {{ tmp_file_root }}/generate_list.sh"
  args:
    executable: /bin/bash
  changed_when: true

- name: check for missing containers
  stat:
    path: "{{ tmp_file_root }}/{{ missing_containers_file }}"
  register: missing_containers_stat

- name: "Fail if there are missing containers"
  fail:
    msg: "There are missing containers"
  when: missing_containers_stat.stat.size != 0

- name: extract file stats
  stat:
    path: "{{ tmp_file_root }}/{{ containers_file }}"
  register: containers_file_stat

- name: Fail if containers list contains no images
  fail:
    msg: "ERROR =========== container list is empty THIS IS A CRITICAL BUG in the container push playbook"
  when: containers_file_stat.stat.size == 0

- name: append base images to containers list
  when: base_container_images|length > 0
  lineinfile:
    path: "{{ tmp_file_root }}/{{ containers_file }}"
    line: "{{ container_name_prefix }}-{{ item }}"
  loop: "{{ base_container_images }}"

- name: run container tagging and always cleanup at the end
  block:
    - name: Retrieve list of built images
      shell: >
        cat {{ tmp_file_root }}/{{ containers_file }}
      register: built_images
      tags:
        - rdoproject_pull
        - rdoproject_push
        - dockerhub_push
        - quaydotio_push
        - remove_local_containers

    - name: Retrieve list of ppc built images
      shell: >
        cat {{ tmp_file_root }}/{{ ppc_containers_file }}
      register: ppc_built_images

    - name: Login to source registry
      docker_login:
        registry_url: "{{ source_registry.auth_url }}"
        username: "{{ source_registry.username }}"
        password: "{{ source_registry.password }}"
        reauthorize: "yes"
      no_log: "yes"
      tags:
        - rdoproject_push
      when: "source_registry.auth_url is defined and source_registry.auth_url != 'unused'"

    # Workaround for https://github.com/ansible/ansible/issues/32868
    - name: Validate source registry login
      block:
        - name: attempt a push to the logged in registry
          shell: >
            docker build -t {{ source_registry.host }}/{{ source_registry.namespace }}/nop - &&
            docker push {{ source_registry.host }}/{{ source_registry.namespace }}/nop
          args:
            stdin: |
              FROM scratch
              CMD touch foo
              ENTRYPOINT ""
      always:
        - name: locally remove validation container
          shell: |
            docker rmi {{ source_registry.host  }}/{{ source_registry.namespace  }}/nop || true

    - when: "'rhel' not in distro_name or 'docker' not in source_registry.host"
      block:

        - name: Pull the images from source registry
          docker_image:
            name: "{{ source_registry.host }}/{{ source_registry.namespace }}/{{ item }}"
            tag: "{{ full_hash }}"
            source: pull
          with_items: "{{ built_images.stdout_lines }}"
          retries: 3
          tags:
            - rdoproject_pull

        - name: Tag images to source registry with named label
          shell: >
            docker tag {{ source_registry.host }}/{{ source_registry.namespace }}/{{ item }}:{{ full_hash }}
            {{ source_registry.host }}/{{ source_registry.namespace }}/{{ item }}:{{ named_label }}
          with_items: "{{ built_images.stdout_lines }}"
          tags:
            - rdoproject_push

        - name: Push images to source registry with named label
          shell: >
            docker push {{ source_registry.host }}/{{ source_registry.namespace }}/{{ item }}:{{ named_label }}
          with_items: "{{ built_images.stdout_lines }}"
          retries: 3
          tags:
            - rdoproject_push

        - include_tasks: registry-push.yml
          loop: "{{ target_registries }}"
          loop_control:
            loop_var: registry
            label: "{{ registry.host }}"
          when: target_registries_push|bool

  always:
    - name: list all local images from source registry
      shell: >
        docker images --filter=reference='{{ source_registry.host }}/{{ source_registry.namespace }}/*:{{ full_hash }}*' \
        --format {% raw %}'{{ .Repository }}:{{ .Tag }}'{% endraw %};
        docker images --filter=reference='{{ source_registry.host }}/{{ source_registry.namespace }}/*:{{ named_label }}' \
        --format {% raw %}'{{ .Repository }}:{{ .Tag }}'{% endraw %}
      register: source_registry_images
      no_log: 'yes'

    - name: Locally remove source registry images
      docker_image:
        name: "{{ item }}"
        state: absent
        force_absent: yes
      loop: "{{ source_registry_images.stdout_lines }}"
      retries: 3
      tags:
        - remove_local_containers

    # TODO: remove source registry containers too
    - name: Locally delete the pushed images
      docker_image:
        name: "{{ item }}"
        state: absent
        force_absent: yes
      with_items: "{{ pushed_containers }}"
      retries: 3
      ignore_errors: yes
      tags:
        - remove_local_containers
