# These tasks create a container manifest in {{registry.host}} with references
# to both _x86_64 and ppc64le tagged container images, if the ppc_manifests
# switch is set to true. Even if ppc_manifests is set, when a ppc build is
# missing the created manifest will contain only the x86 container image.
# First pulls _arch tagged images from source_registry, tag and push
# {{ hash }}_{{ arch }} to {{registry.host}}. Then create and push the
# manifests pointing to {{ hash }}_{{ arch }} containers. The manifest is named
# {{container-name}}:{{full_hash}}_manifest
# As a safety we check {{ ppc_pull_attempts }} number of ppc containers
# If any of those fail to pull, we flip ppc_manifests to false

- name: 'Check if ppc containers are available and can be pulled correctly'
  when: ppc_manifests
  include_tasks: check_set_ppc_manifests.yml

- name: 'Handle ppc containers and manifests if ppc_manifests is set true'
  when:
    - ppc_manifests | bool
  block:
  - name: 'Pull any {{ ppc_tag }} tagged container images from {{ source_registry.host }} registry'
    no_log: true
    docker_image:
      name: "{{ source_registry.host }}/{{ source_registry.namespace }}/{{ item }}"
      tag: "{{ full_hash }}_{{ ppc_tag }}"
      source: pull
    loop: "{{ ppc_built_images.stdout_lines }}"
    loop_control:
      index_var: index
    retries: 3
    ignore_errors: true
    register: pulled_ppc

  - debug:
      msg: "manifest-push.yml debug: Could not pull {{ ppc_tag }} container {{ item }}"
    loop_control:
      index_var: index
    when: pulled_ppc.results[index] is failed
    loop: "{{  ppc_built_images.stdout_lines }}"

  - name: 'Tag and push {{ ppc_tag }} container images to {{ registry.host }}'
    no_log: true
    docker_image:
      name: "{{ source_registry.host }}/{{ source_registry.namespace }}/{{ item }}"
      tag: "{{ full_hash }}_{{ ppc_tag }}"
      source: local
      repository: "{{ registry.host }}/{{ registry.namespace }}/{{ item }}"
      push: yes
    retries: 3
    loop: "{{ ppc_built_images.stdout_lines }}"
    loop_control:
      index_var: index
    register: pushed_ppc
    when: pulled_ppc.results[index] is success

  - name: 'Add pushed {{ ppc_tag }} containers to the cleanup list'
    no_log: true
    set_fact:
      pushed_containers: "{{ pushed_containers + [item.invocation.module_args.repository + ':' + item.invocation.module_args.tag] }}"
    when: 'pushed_ppc.results[index].skipped is not defined'
    loop: "{{ pushed_ppc.results }}"
    loop_control:
      label: |-
        {% if pushed_ppc.results[index].skipped is defined -%}
        {{ pushed_ppc.results[index].item }}
        {%- else -%}
        {{ item.invocation.module_args.repository + ':' + item.invocation.module_args.tag }}
        {%- endif %}
      index_var: index

- name: 'Pull {{ x86_tag }} tagged container images from {{ source_registry.host }}'
  no_log: true
  docker_image:
    name: "{{ source_registry.host }}/{{ source_registry.namespace }}/{{ item }}"
    tag: "{{ full_hash }}_{{ x86_tag }}"
    source: pull
  loop: "{{ built_images.stdout_lines }}"
  retries: 3

- name: 'Tag and push {{ x86_tag }} container images to {{ registry.host }}'
  docker_image:
    name: "{{ source_registry.host }}/{{ source_registry.namespace }}/{{ item }}"
    tag: "{{ full_hash }}_{{ x86_tag }}"
    source: local
    repository: "{{ registry.host }}/{{ registry.namespace }}/{{ item }}"
    push: yes
  retries: 3
  register: pushed_x86
  loop: "{{ built_images.stdout_lines }}"

- name: 'Add pushed {{ x86_tag }} containers to the cleanup list'
  no_log: true
  set_fact:
    pushed_containers: "{{ pushed_containers + [item.invocation.module_args.repository + ':' + item.invocation.module_args.tag] }}"
  loop: "{{ pushed_x86.results }}"
  loop_control:
    label: "{{ item.invocation.module_args.repository + ':' + item.invocation.module_args.tag }}"

- name: "Show pushed containers"
  debug:
    var: pushed_containers

- name: Registry manifest_create_command with --insecure for local registry
  set_fact:
    manifest_extra_opts: "{% if registry.host is match('localhost') %}--insecure{% else %}{% endif %}"

- name: 'Create manifests for containers with {{ x86_tag }}'
  shell: |
    docker manifest create {{ manifest_extra_opts }} \
    {{ registry.host }}/{{ registry.namespace }}/{{ item }}:{{ full_hash }}{{ manifest_tag }} \
    {{ registry.host }}/{{ registry.namespace }}/{{ item }}:{{ full_hash }}_{{ x86_tag }}
    docker manifest annotate --arch amd64 \
    {{ registry.host }}/{{ registry.namespace }}/{{ item }}:{{ full_hash }}{{ manifest_tag }} \
    {{ registry.host }}/{{ registry.namespace }}/{{ item }}:{{ full_hash }}_{{ x86_tag }}
  loop: "{{ built_images.stdout_lines }}"
  changed_when: true

- name: 'Create manifests for containers with {{ ppc_tag }}'
  shell: |
    docker manifest create --amend {{ manifest_extra_opts }} \
    {{ registry.host }}/{{ registry.namespace }}/{{ item }}:{{ full_hash }}{{ manifest_tag }} \
    {{ registry.host }}/{{ registry.namespace }}/{{ item }}:{{ full_hash }}_{{ ppc_tag }}
    docker manifest annotate --arch {{ ppc_tag }} \
    {{ registry.host }}/{{ registry.namespace }}/{{ item }}:{{ full_hash }}{{ manifest_tag }} \
    {{ registry.host }}/{{ registry.namespace }}/{{ item }}:{{ full_hash }}_{{ ppc_tag }}
  loop: "{{ ppc_built_images.stdout_lines }}"
  when:
    - ppc_manifests

- name: 'Push container manifests to {{ registry.host }}'
  shell: >
    docker manifest push -p {{ manifest_extra_opts }}
    {{ registry.host }}/{{ registry.namespace }}/{{ item }}:{{ full_hash }}{{ manifest_tag }}
  retries: 3
  with_items: "{{ built_images.stdout_lines }}"
  changed_when: true

# Check that we pushed all the things correctly to {{ registry.host }}
- name: 'Inspect manifests and {{ x86_tag }} containers in {{ registry.host }}'
  shell: |
    docker manifest inspect --insecure {{ registry.host }}/{{ registry.namespace }}/{{ item.0 }}:{{ full_hash }}{{ item.1 }}
  with_nested:
    - "{{ built_images.stdout_lines }}"
    - [ "{{ manifest_tag }}", "_{{ x86_tag }}" ]
  retries: 3
  changed_when: false

- name: 'Inspect manifests and {{ ppc_tag }} containers in {{ registry.host }}'
  shell: |
    docker manifest inspect --insecure {{ registry.host }}/{{ registry.namespace }}/{{ item }}:{{ full_hash }}{{ manifest_tag }}
    docker manifest inspect --insecure {{ registry.host }}/{{ registry.namespace }}/{{ item }}:{{ full_hash }}_{{ ppc_tag }}
  loop: "{{ ppc_built_images.stdout_lines }}"
  retries: 3
  when:
    - ppc_manifests
