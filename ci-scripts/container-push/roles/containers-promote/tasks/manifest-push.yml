# These tasks create a container manifest in {{registry.host}} with references
# to both _x86_64 and ppc64le tagged container images. If ppc build is missing
# the manifest will contain only the x86 container image.
# First pulls _arch tagged images from source_registry, tag and push
# {{ hash }}_{{ arch }} to {{registry.host}}. Then create and push the
# manifests pointing to {{ hash }}_{{ arch }} containers. The manifest is named
# {{container-name}}:{{full_hash}}_manifest
#
- name: 'Check if {{ ppc_tag }} container exists in {{ source_registry.host }}'
  shell: |
    if docker manifest inspect \
    --insecure "{{ source_registry.host }}/{{ source_registry.namespace }}/{{ distro_name }}-binary-{{ item }}:{{ full_hash }}_{{ ppc_tag }}"  1>/dev/null;
        then
            echo "$image OK";
        else
            echo "$image ERROR";
        fi
    done
  register: check_ppc_containers
  failed_when: false
  loop: "{{ built_images.stdout_lines }}"
  retries: 1
  changed_when: false

- debug:
    msg: "manifest-push.yml debug:{{ ppc_tag }} container not found for {{ item }}"
  loop_control:
    index_var: index
  when: '"ERROR" in check_ppc_containers.results[index].stdout'
  loop: "{{  built_images.stdout_lines }}"

- name: 'Pull {{ x86_tag }} tagged container images from {{ source_registry.host }}'
  docker_image:
    name: "{{ source_registry.host }}/{{ source_registry.namespace }}/{{ distro_name }}-binary-{{ item }}"
    tag: "{{ full_hash }}_{{ x86_tag }}"
    source: pull
  loop: "{{ built_images.stdout_lines }}"
  retries: 3

- name: 'Pull {{ ppc_tag }} tagged container images from {{ source_registry.host }} registry'
  docker_image:
    name: "{{ source_registry.host }}/{{ source_registry.namespace }}/{{ distro_name }}-binary-{{ item }}"
    tag: "{{ full_hash }}_{{ ppc_tag }}"
    source: pull
  loop: "{{ built_images.stdout_lines }}"
  loop_control:
    index_var: index
  when: '"OK" in check_ppc_containers.results[index].stdout'
  retries: 3

- name: 'Tag and push {{ x86_tag }} container images to {{ registry.host }}'
  docker_image:
    name: "{{ source_registry.host }}/{{ source_registry.namespace }}/{{ distro_name }}-binary-{{ item }}"
    tag: "{{ full_hash }}_{{ x86_tag }}"
    source: local
    repository: "{{ registry.host }}/{{ registry.namespace }}/{{ distro_name }}-binary-{{ item }}"
    push: yes
  retries: 3
  register: pushed_x86
  loop: "{{ built_images.stdout_lines }}"

- name: 'Add pushed {{ x86_tag }} containers to the cleanup list'
  set_fact:
    pushed_containers: "{{ pushed_containers + [item.invocation.module_args.repository + ':' + item.invocation.module_args.tag] }}"
  loop: "{{ pushed_x86.results }}"
  loop_control:
      label: "{{ item.invocation.module_args.repository + ':' + item.invocation.module_args.tag }}"

- name: 'Tag and push {{ ppc_tag }} container images to {{ registry.host }}'
  docker_image:
    name: "{{ source_registry.host }}/{{ source_registry.namespace }}/{{ distro_name }}-binary-{{ item }}"
    tag: "{{ full_hash }}_{{ ppc_tag }}"
    source: local
    repository: "{{ registry.host }}/{{ registry.namespace }}/{{ distro_name }}-binary-{{ item }}"
    push: yes
  retries: 3
  loop: "{{ built_images.stdout_lines }}"
  loop_control:
    index_var: index
  register: pushed_ppc
  when: '"OK" in check_ppc_containers.results[index].stdout'

- name: 'Add pushed {{ ppc_tag }} containers to the cleanup list'
  set_fact:
    pushed_containers: "{{ pushed_containers + [item.invocation.module_args.repository + ':' + item.invocation.module_args.tag] }}"
  when: 'pushed_ppc.results[index].skipped is not defined'
  loop: "{{ pushed_ppc.results }}"
  loop_control:
    label: |-
      {% if pushed_ppc.results[index].skipped is defined -%}
      {{ pushed_ppc.results[index].item }}
      {%- else -%}
      {{ item.invocation.module_args.repository + ':' + item.invocation.module_args.tag }}
      {%- endif %}
    index_var: index

- name: Registry manifest_create_command with --insecure for local registry
  set_fact:
    manifest_extra_opts: "{% if registry.host is match('localhost') %}--insecure{% else %}{% endif %}"

# First create manifest for those containers built both in x86 and ppc
- name: 'Create manifests for containers with both {{ x86_tag }} {{ ppc_tag }}'
  shell: |
    docker manifest create {{ manifest_extra_opts }} \
    {{ registry.host }}/{{ registry.namespace }}/{{ distro_name }}-binary-{{ item }}:{{ full_hash }}{{ manifest_tag }} \
    {{ registry.host }}/{{ registry.namespace }}/{{ distro_name }}-binary-{{ item }}:{{ full_hash }}_{{ x86_tag }} \
    {{ registry.host }}/{{ registry.namespace }}/{{ distro_name }}-binary-{{ item }}:{{ full_hash }}_{{ ppc_tag }}
    docker manifest annotate --arch amd64 \
    {{ registry.host }}/{{ registry.namespace }}/{{ distro_name }}-binary-{{ item }}:{{ full_hash }}{{ manifest_tag }} \
    {{ registry.host }}/{{ registry.namespace }}/{{ distro_name }}-binary-{{ item }}:{{ full_hash }}_{{ x86_tag }}
    docker manifest annotate --arch {{ ppc_tag }} \
    {{ registry.host }}/{{ registry.namespace }}/{{ distro_name }}-binary-{{ item }}:{{ full_hash }}{{ manifest_tag }} \
    {{ registry.host }}/{{ registry.namespace }}/{{ distro_name }}-binary-{{ item }}:{{ full_hash }}_{{ ppc_tag }}
  loop_control:
    index_var: index
  loop: "{{ built_images.stdout_lines }}"
  when: '"OK" in check_ppc_containers.results[index].stdout'

# Now create manifest for the rest of the x86 only containers
- name: 'Create manifests for {{ x86_tag }} only containers'
  shell: |
    docker manifest create {{ manifest_extra_opts }} \
    {{ registry.host }}/{{ registry.namespace }}/{{ distro_name }}-binary-{{ item }}:{{ full_hash }}{{ manifest_tag }} \
    {{ registry.host }}/{{ registry.namespace }}/{{ distro_name }}-binary-{{ item }}:{{ full_hash }}_{{ x86_tag }}
    docker manifest annotate --arch amd64 \
    {{ registry.host }}/{{ registry.namespace }}/{{ distro_name }}-binary-{{ item }}:{{ full_hash }}{{ manifest_tag }} \
    {{ registry.host }}/{{ registry.namespace }}/{{ distro_name }}-binary-{{ item }}:{{ full_hash }}_{{ x86_tag }}
  loop_control:
    index_var: index
  loop: "{{ built_images.stdout_lines }}"
  when: '"ERROR" in check_ppc_containers.results[index].stdout'
  changed_when: true

- name: 'Push container manifests to {{ registry.host }}'
  shell: >
    docker manifest push -p {{ manifest_extra_opts }}
    {{ registry.host }}/{{ registry.namespace }}/{{ distro_name }}-binary-{{ item }}:{{ full_hash }}{{ manifest_tag }}
  retries: 3
  with_items: "{{ built_images.stdout_lines }}"
  changed_when: true

# Check that we pushed all the things correctly to {{ registry.host }}
- name: 'Inspect manifests and {{ x86_tag }} containers in {{ registry.host }}'
  shell: |
    docker manifest inspect --insecure {{ registry.host }}/{{ registry.namespace }}/{{ distro_name }}-binary-{{ item.0 }}:{{ full_hash }}{{ item.1 }}
  with_nested:
    - "{{ built_images.stdout_lines }}"
    - ["{{ manifest_tag }}", "_{{ x86_tag }}"]
  retries: 3
  changed_when: false

- name: 'Inspect manifests and {{ ppc_tag }} containers in {{ registry.host }}'
  shell: |
    docker manifest inspect --insecure {{ registry.host }}/{{ registry.namespace }}/{{ distro_name }}-binary-{{ item }}:{{ full_hash }}{{ manifest_tag }}
    docker manifest inspect --insecure {{ registry.host }}/{{ registry.namespace }}/{{ distro_name }}-binary-{{ item }}:{{ full_hash }}_{{ ppc_tag }}
  loop: "{{ built_images.stdout_lines }}"
  loop_control:
    index_var: index
  retries: 3
  when: '"OK" in check_ppc_containers.results[index].stdout'
