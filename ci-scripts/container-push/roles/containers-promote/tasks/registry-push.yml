---
- name: Login to registry
  docker_login:
    registry_url: "{{ registry.auth_url }}"
    username: "{{ registry.username }}"
    password: "{{ registry.password }}"
    reauthorize: "yes"
  no_log: true
  when: "registry.auth_url is defined and registry.auth_url != 'unused'"

# Workaround for https://github.com/ansible/ansible/issues/32868
- name: Validate target registry login
  block:
    - name: attempt a push to the logged in registry
      shell: >
        docker build -t {{ registry.host }}/{{ registry.namespace }}/nop - &&
        docker push {{ registry.host }}/{{ registry.namespace }}/nop
      args:
        stdin: |
          FROM scratch
          CMD touch foo
          ENTRYPOINT ""
  rescue:
    - debug:
        msg: |
          The workaround to test login failed, but we've seen it failing before and other push operation passing.
          We'll leave this rescue branch until the workaround is fixed, so we don't fail but we don't forget
  always:
    - name: locally remove validation container
      shell: |
        docker rmi {{ registry.host  }}/{{ registry.namespace  }}/nop || true

- name: Create public empty repositories on registry
  uri:
    url: "https://{{ registry.host }}/api/v1/repository"
    method: POST
    body_format: json
    body:
      namespace: "{{ registry.namespace }}"
      repository: "{{ container_name_prefix }}-{{ item }}"
      description: "TripleO container for {{ container_name_prefix }}-{{ item }}"
      visibility: public
    headers:
      Authorization: "Bearer {{ registry.token }}"
      Content-Type: "application/json"
    status_code:
      - 400
      - 201
  loop: "{{ built_images.stdout_lines }}"
  register: image_result
  until: image_result is success
  retries: 2
  when: registry.create_repo|default(false)|bool

# Nested loop order here is on purpose, so we push first all the images with the full hash, then we tag with the named label.
- name: Tag and push images to registry
  docker_image:
    name: "{{ source_registry.host }}/{{ source_registry.namespace }}/{{ container_name_prefix }}-{{ item[1] }}"
    tag: "{{ item[0] }}"
    repository: "{{ registry.host }}/{{ registry.namespace }}/{{ container_name_prefix }}-{{ item[1] }}"
    push: yes
    source: local
    # This force-tag is absolutely needed, if image exists with this tag,
    # docker_image will not try a push without this flag
    force_tag: yes
  with_nested:
    - ["{{ full_hash }}", "{{ named_label }}"]
    - "{{ built_images.stdout_lines }}"
  register: pushed
  retries: 3
  tags:
    - dockerhub_push

# Create and push container manifests to registry.host with _x86_64 and ppc64le
# tagged containers. Disabled by default https://tree.taiga.io/project/tripleo-ci-board/task/1394
# Multi arch manifest is only compatible with v2_s2 API schema
- name: 'Push {{ x86_tag }} {{ ppc_tag }} containers and manifests to {{ registry.host }}'
  include_tasks: manifest-push.yml
  when:
    - "manifest_push|default(false)|bool"
    - "registry.schema|default('v2_s1') == 'v2_s2'"


- name: Check if images were pushed
  shell: |
    tag={{ full_hash }}
    for image in $(cat {{ containers_file }})
    do
        if docker manifest inspect --insecure "{{ registry.host }}/{{ registry.namespace }}/{{ container_name_prefix }}-${image}:${tag}" 1>/dev/null;
        then
            echo "$image OK";
        else
            echo "$image ERROR";
        fi
    done
  register: command_result
  failed_when: "'ERROR' in command_result.stdout or command_result.rc != 0"
  retries: 1
  changed_when: false
  # manifest commands are only compatible with v2_s2 API schema
  when: "registry.schema|default('v2_s1') == 'v2_s2'"

- name: Add pushed containers to the cleanup list
  set_fact:
    pushed_containers: "{{ pushed_containers + [item.invocation.module_args.repository + ':' + item.invocation.module_args.tag] }}"
  loop: "{{ pushed.results }}"
  loop_control:
      label: "{{ item.invocation.module_args.repository + ':' + item.invocation.module_args.tag }}"
