- name: Download and repush container and multi-arch images on insecure registries
  hosts: all
  vars:
    ppc_manifests: true
  tasks:
    - name: call tasks to manage variables
      include_tasks: ../provision/manage_variables.yml

    - name: Test promoter container manifest-push.yml
      block:
        - name: include stage setup variables
          include_vars:
            file: "/tmp/stage-info.yaml"
            name: stage_info

        - name: sets critical variables
          set_fact:
            full_hash: "{{ stage_info.dlrn.promotions.promotion_candidate.full_hash }}"
            source_registry: "{{ stage_info.registries.source }}"
            target_registries: "{{ stage_info.registries.targets }}"

        - name: Check that the containers are pushed correctly to all target registries
          loop: "{{ target_registries | map(attribute='host') | product(stage_info.containers.images) | map('join', '/') | list }}"
          shell: |
            docker manifest inspect --insecure {{ image }}
          loop_control:
            loop_var: image
          when:
            - not ppc_manifests
            - '"ppc" not in image'

        - name: Check that the containers are pushed correctly to all target registries
          loop: "{{ target_registries | map(attribute='host') | product(stage_info.containers.images) | map('join', '/') | list }}"
          shell: |
            docker manifest inspect --insecure {{ image }}
          loop_control:
            loop_var: image
          when:
            - ppc_manifests

        - name: Gather list of local images referencing registries
          shell: |
            docker images --filter=reference='{{ registry.host }}/{{ registry.namespace }}/*:*' --format {% raw %}'{{ .ID }}'{% endraw %}
          loop: "{{ target_registries + [source_registry] }}"
          register: inspections
          loop_control:
            loop_var: registry
            label: "{{ registry.host }}"

        - name: Check that container-push run did not leave any image behind
          assert:
            that: item.stdout | length == 0
            fail_msg: "Some images for '{{ item.registry.name }}({{ item.registry.host }})' were left behind"
            success_msg: "All images for '{{ item.registry.name }}({{ item.registry.host }})' removed properly"
          loop: "{{ inspections.results }}"
          loop_control:
            label: "{{ item.registry.host }}"

        - name: list files in docker manifest dir
          find:
            paths: /home/{{ promoter_user }}/.docker/manifests
          register: manifest_files

        # if manifests files are left in manifest dir, they tend to conflict
        # with each other. It's best that they are cleaned after pushing to
        # prevent errors
        # TODO(gcerami) gather the actual manifest for comparison, not just
        # blindly the whole dir, which may contain other manifest wehn testing with
        # delegated driver
        - name: asserts no manifest leftovers
          assert:
            that: manifest_files.matched == 0
            fail_msg: Manifest push left some files in manifest dir
            success_msg: Manifest directory left clean
