---
- name: Check pre-requisites
  hosts: all
  tasks:
    - name: Fail if ansible docker module is not functional
      docker_image:
        name: hello-world
        source: pull

- name: Set up docker experimental commands (common to all tests)
  hosts: all
  tasks:
    - name: Create user config dir
      file:
        path: /home/{{ ansible_user }}/.docker/
        owner: "{{ ansible_user }}"
        state: directory

    - name: Enable experimental commands in user config
      copy:
        content: |
          {
              "experimental": "enabled"
          }
        dest: /home/{{ ansible_user }}/.docker/config.json


- name: Disable target push, only promote containers in source registry
  hosts: all
  vars:
    # The way the container-push works, there's currently no way to test the vars lookup directly
    # so we are passing the vars directly here, but this reduces coverage: if we
    # change the lookup, they don't get any test
    # Unfortunately adding coverage for those requires a refactoring of the way vars are passed
    # to the container-push in general, which is way too difficult to do right now.
    release: master
    named_label: triple-ci-staging-promoted
    # full_hash is provided by the staging environment
    script_root: UNUSED
    distro_name: centos
    distro_version: 7
    containers_file: "parsed_containers-{{ distro_name }}-{{ distro_version }}-{{ release }}.txt"
    target_registries_push: false
    containers_list:
      - nova-compute
      - neutron-server
  tasks:
    - name: Test promoter container
      block:
        - name: launch staging setup scripts
          shell: |
            # Export the path to the mounted docker socket so all docker client commands will use it
            python3 \
            ../../../../../dlrnapi_promoter/stage.py setup --scenes dlrn,registries,containers

        - name: include stage setup variables
          include_vars:
            file: "/tmp/stage-info.yaml"
            name: stage_info

        - name: sets critical variables
          set_fact:
            full_hash: "{{ stage_info.dlrn.promotions.promotion_candidate.full_hash }}"
            source_registry: "{{ stage_info.registries.source }}"
            target_registries: "{{ stage_info.registries.targets }}"

        - name: Include containers-promote role to test
          include_role:
            name: ../../../../../container-push/roles/containers-promote

        - name: Gather information on containers from registry
          loop: "{{ target_registries | map(attribute='host') | product(stage_info.containers.images) | map('join', '/') | list }}"
          shell: |
            docker manifest inspect --insecure {{ image }} 2> /dev/null || true
          register: pushed_images
          loop_control:
            loop_var: image

        - name: Check that no containers were pushed to target registry
          assert:
            that: image_manifest.stdout == "" # noqa 602
            success_msg: "Container {{ image_manifest.image  }} was not pushed to target registry with flag disabled"
            fail_msg: "Container {{ image_manifest.image  }} found in target registry with push flag disabled"
          loop: "{{ pushed_images.results }}"
          loop_control:
            loop_var: image_manifest

      always:
        - name: Teardown
          shell: >
            python3
            ../../../../../dlrnapi_promoter/stage.py
            teardown --scenes dlrn,registries,containers


# This test is copied and pasted from below with some change:
# - Manifests are disabled
# - A password protected registry is used (tests login to registries)
# - we only check if the containers were pushed
#
# This test must be the first in the list, as the tripleo-common integration uses output from
# the test below that must be available when tripleo-common tests are started
- name: Download and repush container images to secure registries without multi-arch manifests
  hosts: all
  vars:
    release: master
    named_label: triple-ci-staging-promoted
    # full_hash is provided by the staging environment
    script_root: UNUSED
    distro_name: centos
    distro_version: 7
    containers_file: "parsed_containers-{{ distro_name }}-{{ distro_version }}-{{ release }}.txt"
    manifest_push: false
    containers_list:
      - nova-compute
      - neutron-server
    # Source and target registries are provided by staging environment
  tasks:
    - name: Test promoter container-push
      block:
        - name: launch staging setup scripts
          shell: |
            # Export the path to the mounted docker socket so all docker client commands will use it
            python3 \
            ../../../../../dlrnapi_promoter/stage.py setup \
            --scenes dlrn,registries,containers --stage-config-file stage-config-secure.yaml

        - name: include stage setup variables
          include_vars:
            file: "/tmp/stage-info.yaml"
            name: stage_info

        - name: sets critical variables
          set_fact:
            full_hash: "{{ stage_info.dlrn.promotions.promotion_candidate.full_hash }}"
            source_registry: "{{ stage_info.registries.source }}"
            target_registries: "{{ stage_info.registries.targets }}"

        - name: Include containers-promote role to test
          include_role:
            name: ../../../../../container-push/roles/containers-promote

        - name: Check that the containers are pushed correctly to all target registries
          loop: "{{ target_registries | map(attribute='host') | product(stage_info.containers.images) | map('join', '/') | list }}"
          shell: |
            docker manifest inspect --insecure {{ image }}
          # skip multi-arch containers
          # alternative to this is to add an option to the staging environment
          # to not produce multi-arch containers
          when: '"ppc" not in image and "x86" not in image'
          loop_control:
            loop_var: image

      always:
        - name: Teardown
          shell: >
            python3
            ../../../../../dlrnapi_promoter/stage.py
            teardown --scenes dlrn,registries,containers
        # the teardown here must not contain the registry_cleanup tag, or it will not clean up properly
        # in the tripleo-common integration test


# Tests the container-push with:
# - insecure local registries
# - multi-arch manifests
# - ppc_manifests
- name: Download and repush container and multi-arch images on insecure registries
  hosts: all
  vars:
    # The way the container-push works, there's currently no way to test the vars lookup directly
    # so we are passing the vars directly here, but this reduces coverage: if we
    # change the lookup, they don't get any test
    # Unfortunately adding coverage for those requires a refactoring of the way vars are passed
    # to the container-push in general, which is way too difficult to do right now.
    release: master
    named_label: triple-ci-staging-promoted
    # full_hash is provided by the staging environment
    script_root: UNUSED
    distro_name: centos
    distro_version: 7
    containers_file: "parsed_containers-{{ distro_name }}-{{ distro_version }}-{{ release }}.txt"
    # Source and target registries are provided by staging environment
    manifest_push: true
    ppc_manifests: true
    # Decrease the chance the ppc_manifests is disabled by our check
    ppc_pull_attempts: 3
    containers_list:
      - nova-compute
      - neutron-server
  tasks:
    - name: Test promoter container manifest-push.yml
      block:
        - name: launch staging setup scripts
          shell: |
            # Export the path to the mounted docker socket so all docker client commands will use it
            python3 \
            ../../../../../dlrnapi_promoter/stage.py setup --scenes dlrn,registries,containers

        - name: include stage setup variables
          include_vars:
            file: "/tmp/stage-info.yaml"
            name: stage_info

        - name: sets critical variables
          set_fact:
            full_hash: "{{ stage_info.dlrn.promotions.promotion_candidate.full_hash }}"
            source_registry: "{{ stage_info.registries.source }}"
            target_registries: "{{ stage_info.registries.targets }}"

        - name: Include containers-promote role to test
          include_role:
            name: ../../../../../container-push/roles/containers-promote

        - name: Check that the containers are pushed correctly to all target registries
          loop: "{{ target_registries | map(attribute='host') | product(stage_info.containers.images) | map('join', '/') | list }}"
          shell: |
            docker manifest inspect --insecure {{ image }}
          loop_control:
            loop_var: image
          when:
            - not ppc_manifests
            - '"ppc" not in image'

        - name: Check that the containers are pushed correctly to all target registries
          loop: "{{ target_registries | map(attribute='host') | product(stage_info.containers.images) | map('join', '/') | list }}"
          shell: |
            docker manifest inspect --insecure {{ image }}
          loop_control:
            loop_var: image
          when:
            - ppc_manifests

        - name: Gather list of local images referencing registries
          shell: |
            docker images --filter=reference='{{ registry.host }}/{{ registry.namespace }}/*:*' --format {% raw %}'{{ .ID }}'{% endraw %}
          loop: "{{ target_registries + [source_registry] }}"
          register: inspections
          loop_control:
            loop_var: registry
            label: "{{ registry.host }}"

        - name: Check that container-push run did not leave any image behind
          assert:
            that: item.stdout | length == 0
            fail_msg: "Some images for '{{ item.registry.name }}({{ item.registry.host }})' were left behind"
            success_msg: "All images for '{{ item.registry.name }}({{ item.registry.host }})' removed properly"
          loop: "{{ inspections.results }}"
          loop_control:
            label: "{{ item.registry.host }}"

        - name: list files in docker manifest dir
          find:
            paths: /home/{{ ansible_user }}/.docker/manifests
          register: manifest_files

        # if manifests files are left in manifest dir, they tend to conflict
        # with each other. It's best that they are cleaned after pushing to
        # prevent errors
        # TODO(gcerami) gather the actual manifest for comparison, not just
        # blindly the whole dir, which may contain other manifest wehn testing with
        # delegated driver
        - name: asserts no manifest leftovers
          assert:
            that: manifest_files.matched == 0
            fail_msg: Manifest push left some files in manifest dir
            success_msg: Manifest directory left clean

      always:
        - name: Teardown
          shell: >
            python3
            ../../../../../dlrnapi_promoter/stage.py
            teardown --scenes dlrn,registries,containers
        # the teardown here must not contain the registry_cleanup tag, or it will not clean up
        # properly in the tripleo-common integration test

# Tests the container-push with:
# - insecure local registries
# - multi-arch manifests but
# - ppc_manifests disabled
- name: Download and repush container and multi-arch images on insecure registries
  hosts: all
  vars:
    # The way the container-push works, there's currently no way to test the vars lookup directly
    # so we are passing the vars directly here, but this reduces coverage: if we
    # change the lookup, they don't get any test
    # Unfortunately adding coverage for those requires a refactoring of the way vars are passed
    # to the container-push in general, which is way too difficult to do right now.
    release: master
    named_label: triple-ci-staging-promoted
    # full_hash is provided by the staging environment
    script_root: UNUSED
    distro_name: centos
    distro_version: 7
    containers_file: "parsed_containers-{{ distro_name }}-{{ distro_version }}-{{ release }}.txt"
    # Source and target registries are provided by staging environment
    manifest_push: true
    ppc_manifests: false
    containers_list:
      - nova-compute
      - neutron-server
  tasks:
    - name: Test promoter container manifest-push.yml
      block:
        - name: launch staging setup scripts
          shell: |
            # Export the path to the mounted docker socket so all docker client commands will use it
            python3 \
            ../../../../../dlrnapi_promoter/stage.py setup --scenes dlrn,registries,containers

        - name: include stage setup variables
          include_vars:
            file: "/tmp/stage-info.yaml"
            name: stage_info

        - name: sets critical variables
          set_fact:
            full_hash: "{{ stage_info.dlrn.promotions.promotion_candidate.full_hash }}"
            source_registry: "{{ stage_info.registries.source }}"
            target_registries: "{{ stage_info.registries.targets }}"


        - name: Include containers-promote role to test
          include_role:
            name: ../../../../../container-push/roles/containers-promote

        - name: Check that the containers are pushed correctly to all target registries
          loop: "{{ target_registries | map(attribute='host') | product(stage_info.containers.images) | map('join', '/') | list }}"
          shell: |
            docker manifest inspect --insecure {{ image }}
          when: '"ppc" not in image'
          loop_control:
            loop_var: image

        - name: Gather list of local images referencing registries
          shell: |
            docker images --filter=reference='{{ registry.host }}/{{ registry.namespace }}/*:*' --format {% raw %}'{{ .ID }}'{% endraw %}
          loop: "{{ target_registries + [source_registry] }}"
          register: inspections
          loop_control:
            loop_var: registry
            label: "{{ registry.host }}"

        - name: Check that container-push run did not leave any image behind
          assert:
            that: item.stdout | length == 0
            fail_msg: "Some images for '{{ item.registry.name }}({{ item.registry.host }})' were left behind"
            success_msg: "All images for '{{ item.registry.name }}({{ item.registry.host }})' removed properly"
          loop: "{{ inspections.results }}"
          loop_control:
            label: "{{ item.registry.host }}"

        - name: list files in docker manifest dir
          find:
            paths: /home/{{ ansible_user }}/.docker/manifests
          register: manifest_files

        # if manifests files are left in manifest dir, they tend to conflict
        # with each other. It's best that they are cleaned after pushing to
        # prevent errors
        # TODO(gcerami) gather the actual manifest for comparison, not just
        # blindly the whole dir, which may contain other manifest wehn testing with
        # delegated driver
        - name: asserts no manifest leftovers
          assert:
            that: manifest_files.matched == 0
            fail_msg: Manifest push left some files in manifest dir
            success_msg: Manifest directory left clean

      always:
        - name: Teardown
          shell: >
            python3
            ../../../../../dlrnapi_promoter/stage.py
            teardown --scenes dlrn,registries,containers
          tags:
            - registry_cleanup
          # Only the last play should have the registry_cleanup set to work with
          # tripleo-common-integration test
