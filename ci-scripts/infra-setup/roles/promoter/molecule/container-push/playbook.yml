---
# other than installing docker, need to install docker-python and ansible
# also need to start docker


# This playbook can be used to download the container images which
# passed CI and tag them back to rdoproject registry.
# It will also mirror the images to docker.io.
- name: Download and repush container images
  hosts: all
  vars:
    # The way the container-push works, there's currently no way to test the vars lookup directly
    # so we are passing the vars directly here, but this reduces coverage: if we
    # change the lookup, they don't get any test
    # Unfortunately adding coverage for those requires a refactoring of the way vars are passed
    # to the container-push in general, which is way too difficult to do right now.
    release: master
    named_label: triple-ci-staging-promoted
    # full_hash is provided by the staging environment
    script_root: UNUSED
    distro_name: centos
    distro_version: 7
    containers_file: "parsed_containers-{{ distro_name }}-{{ distro_version }}-{{ release }}.txt"
    source_registry:
      name: local-source-registry
      host: localhost:6000
      username: unused
      password: unused
      namespace: "tripleo{{ release }}"
    target_registries:
      - host: localhost:6500
        name: local-target-registry-1
        username: unused
        password: unused
        namespace: "tripleo{{ release }}"
        token: unused
  tasks:
    - name: Create user config dir
      file:
        path: /home/{{ ansible_user }}/.docker/
        owner: "{{ ansible_user }}"
        state: directory

    - name: Enable experimental commands in user config
      copy:
        content: |
          {
              "experimental": "enabled"
          }
        dest: /home/{{ ansible_user }}/.docker/config.json

    - name: Test promoter container manifest-push.yml
      block:
        - name: launch staging setup scripts
          shell: |
            # Export the path to the mounted docker socket so all docker client commands will use it
            {{ ansible_python_interpreter }} ../../../../../dlrnapi_promoter/tests/staging-setup/staging_environment.py setup --components registries,container-images

        - name: include stage setup variables
          include_vars: /tmp/stage-info.yaml

        - set_fact:
            full_hash: "{{ promotions.promotion_candidate.full_hash }}"

        - debug:
            var: containers

        - name: Include containers-promote role to test
          include_role:
            name: ../../../../../container-push/roles/containers-promote

        - name: Check that the containers are pushed correctly to all target registries
          loop: "{{ target_registries | map(attribute='host') | product(containers) | map('join', '/') | list }}"
          shell: |
            docker manifest inspect --insecure {{ image }}
          loop_control:
            loop_var: image

        - name: Gather list of local images referencing registries
          shell: |
            docker images --filter=reference='{{ registry.host }}/{{ registry.namespace }}/*:*' --format {% raw %}'{{ .ID }}'{% endraw %}
          loop: "{{ target_registries + [source_registry] }}"
          register: inspections
          loop_control:
            loop_var: registry
            label: "{{ registry.host }}"

        - name: Check that container-push run did not leave any image behind
          assert:
            that: item.stdout | length == 0
            fail_msg: "Some images for '{{ item.registry.name }}({{ item.registry.host }})' were left behind"
            success_msg: "All images for '{{ item.registry.name }}({{ item.registry.host }})' removed properly"
          loop: "{{ inspections.results }}"
          loop_control:
            label: "{{ item.registry.host }}"

        - name: list files in docker manifest dir
          find:
            paths: /home/{{ ansible_user }}/.docker/manifests
          register: manifest_files

        # if manifests files are left in manifest dir, they tend to conflict
        # with each other. It's best that they are cleaned after pushing to
        # prevent errors
        # TODO(gcerami) gather the actual manifest for comparison, not just
        # blindly the whole dir, which may contain other manifest wehn testing with
        # delegated driver
        - assert:
            that: manifest_files.matched == 0
            fail_msg: Manifest push left some files in manifest dir
            success_msg: Manifest directory left clean

      always:
        - name: Teardown
          shell: |
            {{ ansible_python_interpreter }} ../../../../../dlrnapi_promoter/tests/staging-setup/staging_environment.py teardown --components registries,container-images

          tags:
            - registry_cleanup

