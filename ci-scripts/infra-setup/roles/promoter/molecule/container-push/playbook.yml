---
# other than installing docker, need to install docker-python and ansible
# also need to start docker


# This playbook can be used to download the container images which
# passed CI and tag them back to rdoproject registry.
# It will also mirror the images to docker.io.
- name: Download and repush container images
  hosts: all
  vars:
    # The way the container-push works, there's currently no way to test the vars lookup directly
    # so we are passing the vars directly here, but this reduces coverage: if we
    # change the lookup, they don't get any test
    # Unfortunately adding coverage for those requires a refactoring of the way vars are passed
    # to the container-push in general, which is way too difficult to do right now.
    release: master
    named_label: triple-ci-staging-promoted
    full_hash: 82a1e08b25e42f1e8ea99d7c9b6957bb06423a34_dae2ef8
    script_root: UNUSED
    distro_name: centos
    distro_version: 7
    containers_file: "parsed_containers-{{ distro_name }}-{{ distro_version }}-{{ release }}.txt"
    source_registry:
      # Name and port are mandatory only during test
      name: local-source-registry
      port: 5000
      host: localhost:5000
      username: unused
      password: unused
      namespace: "tripleo{{ release }}"
    target_registries:
      # Name and port are mandatory only during test
      - host: localhost:5500
        name: local-target-registry-1
        port: 5500
        username: unused
        password: unused
        namespace: "tripleo{{ release }}"
        token: unused
  environment:
    DOCKER_CLI_EXPERIMENTAL: enabled
  tasks:
    - name: Test promoter container manifest-push.yml
      block:
        - name: Mock source and target registries -- pull registry image
          docker_image:
            name: registry:2
            source: pull

        - name: Mock source and target registries -- run registries
          docker_container:
            image: registry:2
            name: "{{ registry.name }}"
            restart: true
            restart_policy: always
            ports:
              - "{{ registry.port }}:5000"
          loop: "{{ target_registries + [source_registry] }}"
          loop_control:
            loop_var: registry
            label: "{{ registry.host }}"

        - name: Mock source and target registries -- create fake images
          shell: |
            CONTAINER_LIST="base openstack-base neutron-server nova-compute"
            for container in $CONTAINER_LIST; do
              docker tag registry:2 {{ source_registry.host }}/{{ source_registry.namespace }}/centos-binary-$container:{{ full_hash }}
              docker tag registry:2 {{ source_registry.host }}/{{ source_registry.namespace }}/centos-binary-$container:{{ full_hash }}_x86_64
            done
            CONTAINER_LIST="base openstack-base"
            for container in $CONTAINER_LIST; do
              docker tag registry:2 {{ source_registry.host }}/{{ source_registry.namespace }}/centos-binary-$container:{{ full_hash }}_ppc64le
            done

        - name: Mock source and target registries -- Gather fake images infos
          shell: |
            docker images --filter=reference='{{ source_registry.host }}/{{ source_registry.namespace }}/*:{{ full_hash }}*' --format {% raw %}'{{ .Repository }}:{{ .Tag }}'{% endraw %};
            docker images --filter=reference='{{ source_registry.host }}/{{ source_registry.namespace }}/*:{{ named_label }}' --format {% raw %}'{{ .Repository  }}:{{ .Tag  }}'{% endraw %}
          register: images

        - name: Mock souce and target registries - push fake images to source registry
          docker_image:
            name: "{{ item }}"
            push: yes
            force_tag: yes
          loop: "{{ images.stdout_lines }}"
          loop_control:
            label: "{{ item }}"

        - name: Mock souce and target registries - remove fake images locally
          docker_image:
            name: "{{ item }}"
            state: absent
            force_absent: yes
          loop: "{{ images.stdout_lines }}"
          loop_control:
            label: "{{ item }}"

        - name: Create pattern file
          copy:
            content: |
                ^neutron-server$
                ^nova-compute$
            dest: /tmp/images_pattern_file

        - name: Include containers-promote role to test
          include_role:
            name: ../../../../../container-push/roles/containers-promote


        - name: Check that the containers are pushed correctly to all target registries
          loop: "{{ target_registries }}"
          shell: |
            export DOCKER_CLI_EXPERIMENTAL=enabled
            for image in {{ images.stdout_lines|join(" ") }}; do
              docker manifest inspect --insecure $image
            done
          loop_control:
            loop_var: registry

        - name: Gather list of local images referencing registries
          shell: |
            docker images --filter=reference='{{ registry.host }}/{{ registry.namespace }}/*:*' --format {% raw %}'{{ .ID }}'{% endraw %}
          loop: "{{ target_registries + [source_registry] }}"
          register: inspections
          loop_control:
            loop_var: registry
            label: "{{ registry.host }}"

        - name: Check that container-push run did not leave any image behind
          assert:
            that: item.stdout | length == 0
            fail_msg: "Some images for '{{ item.registry.name }}({{ item.registry.host }})' were left behind"
            success_msg: "All images for '{{ item.registry.name }}({{ item.registry.host }})' removed properly"
          loop: "{{ inspections.results }}"
          loop_control:
            label: "{{ item.registry.host }}"

      always:

        - name: remove pattern file
          file:
            path: /tmp/images_pattern_file
            state: absent

        - name: 'Stop and remove registries'
          docker_container:
            name: "{{ registry.name }}"
            state: absent
          loop: "{{ target_registries + [source_registry] }}"
          loop_control:
            loop_var: registry
            label: "{{ registry.name }}"
          tags:
            - registry_cleanup

