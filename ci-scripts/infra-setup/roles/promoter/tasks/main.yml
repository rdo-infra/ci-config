#
# Repos and packages
#
- name: Packages
  when 
  block:
  
- name: Configure docker-ce repo
  command: yum-config-manager --add-repo \
      https://download.docker.com/linux/centos/docker-ce.repo


- name: Install required packages
  yum:
    name:
      - yum-utils

- name: Install required packages
  yum:
    name:
      - httpd
      - python-virtualenv
      - telegraf
      - yum-utils
      - device-mapper-persistent-data
      - lvm2
      - openssh
      - git
      - parted
      - docker-ce
      - docker-ce-cli
      - containerd.io
    state: present
  become: true

- block:
    - name: Mount external volume - create a partition
      parted:
        device: /dev/vdb
        number: 1
        state: present

    - name: Mount external volume - create a filesystem
      filesystem:
        fstype: xfs
        dev: /dev/vdb1

    - name: create a mount folder
      file:
        path: /var/lib/docker
        state: directory

    - name: Mount external volume - mount the partition
      mount:
        path: /var/lib/docker
        src: /dev/vdb1
        fstype: xfs
        state: mounted

    - name: Install required packages
      yum:
        name: '{{ item }}'
        state: present
      with_items:
        - docker
        - docker-python
  become: true
  when: not setup_staging

- name: Install influxdb repo to get telegraf
  yum_repository:
    name: influxdb
    description: InfluxDB Repository - RHEL \$releasever
    baseurl: https://repos.influxdata.com/rhel/\$releasever/\$basearch/stable
    enabled: yes
    gpgcheck: yes
    gpgkey: https://repos.influxdata.com/influxdb.key
  become: true

- name: Create a directory for the promoter logs
  file:
    path: "{{ ansible_user_dir }}/promoter_logs"
    state: directory
    setype: httpd_sys_content_t
    owner: "{{ ansible_user_id }}"
    group: "{{ ansible_real_group_id }}"

- name: copy logrotate selinux policy
  copy:
    src: logrotate-promoter.te
    dest: /tmp/logrotate-promoter.te
  register: policy

- name: compile and permanently install policy
  shell: |
      checkmodule -M -m -o /tmp/logrotate-promoter.mod /tmp/logrotate-promoter.te
      semodule_package -m /tmp/logrotate-promoter.mod -o /tmp/logrotate-promoter.pp
      semodule -i /tmp/logrotate-promoter.pp
      rm -f /tmp/logrotate-promoter.pp /tmp/logrotate-promoter.mod
  when: policy|changed

- name: Fix home directory permissions
  file:
    path: "{{ ansible_user_dir }}"
    mode: 0755

- name: Disable the default welcome page
  copy:
    content: ''
    dest: '/etc/httpd/conf.d/welcome.conf'
    backup: yes
  become: true

- name: Add config file for Apache to expose the logs
  blockinfile:
    path: '/etc/httpd/conf.d/promoter_logs.conf'
    create: yes
    block: |
      <VirtualHost *:80>
          ServerAdmin rdo-ci-admins@redhat.com
          DocumentRoot {{ ansible_user_dir }}/promoter_logs

          <Directory {{ ansible_user_dir }}/promoter_logs>
              Options Indexes MultiViews
              AllowOverride None
              Require all granted
          </Directory>
      </VirtualHost>
  register: apache_config
  become: true

- name: Start and enable Apache
  service:
    name: httpd
    state: restarted
    enabled: yes
  become: true
  when: apache_config|changed

- name: Configure overlay2 for docker
  copy:
    content: |
      {
          "storage-driver": "overlay2",
          "storage-opts": [
            "overlay2.override_kernel_check=true"
          ]
      }
    dest: /etc/docker/daemon.json
  become: true
  register: docker_config
  when: not setup_staging

- name: Reload docker if config was changed
  service:
    name: docker
    state: reloaded
  become: true
  when: docker_config is changed
  when: not setup_staging

- name: Start and enable Docker
  service:
    name: docker
    state: started
    enabled: yes
  become: true
  when: not setup_staging

- name: add configuration for the log rotation
  copy:
    content: |
        {{ ansible_user_dir }}/promoter_logs/*.log {
            daily
            missingok
            su {{ ansible_user_id }} {{ ansible_user_id }}
            dateext
            dateyesterday
            notifempty
            delaycompress
            rotate 60
        }
    dest: /etc/logrotate.d/promoter
    owner: root
    group: root
    mode: 0644
  become: true


# TODO(rfolco): Add a condition for staging promoter in zuul,
# where the keys / secrets are generated within the job
#

- name: Handle credentials for zuul environment
  when:
    - zuul is defined
  block:
    - copy:
       content: export DLRNAPI_PASSWORD='test'
       dest: "{{ remote_path_dlrnapi_secret }}"

    - debug:
        msg: registry credentials come from token in zuul

    - openssh_keypair:
        path: "{{ remote_path_uploader_key }}"
        size: 1024
      register: uploader_key


- name: Stat for local dlrnapi secrets file
  stat:
    path: "{{ local_path_dlrn_secret }}"
  register: dlrnapi_secret_local
  delegate_to: localhost
- name: Stat for local registry secrets file
  stat:
    path: "{{ local_path_registry_secret }}"
  register: registry_secret_local
  delegate_to: localhost
- name: Stat for uploader_key file
  stat:
    path: "{{ local_path_uploader_key }}"
  register: uploader_key_local
  delegate_to: localhost

# STANDALONE environment
#

- copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
  with_items:
    - src: "{{ local_path_dlrnapi_secret }}"
      dest: "{{ remote_path_dlrnapi_secret }}"
    - src: "{{ local_path_registry_secret }}"
      dest: "{{ remote_path_registry_secret }}"
    - src: "{{ local_path_uploader_key }}"
      dest: "{{ remote_path_uploader_key }}"
  when:
    - zuul is not defined
    - dlrnapi_secret_local.stat.exists
    - registry_secret_local.stat.exists
    - uploader_key_local.stat.exists

- name: Stat for dlrnapi secrets file on server
  stat:
    path: "{{ remote_path_dlrnapi_secret }}"
  register: remote_dlrnapi_secret
- name: Stat for registry secrets file on server
  stat:
    path: "{{ remote_path_registry_secret }}"
  register: remote_registry_secret on server
- name: Stat for uploader_key
  stat:
    path: "{{ remote_path_uploader_key }}"
  register: remote_uploader_key


- name: Fail if we don't have any credential to use.
  fail:
    msg: Installation cannot continue, credentials are missing
  when: >
    not remote_dlrnapi_secret.stat.exists
    or not remote_registry_secret.stat.exists
    or not remote_uploader_key.stat.exists

- name: Copy files from the provisioned location to target
  command: 'cp {{ item.source }} {{ item.target }}'
  args:
    creates: '{{ item.target }}'
  with_items:
      - source: "{{  }}"
        target: "{{ ansible_user_dir }}/dlrnapi_secret"

      - source: '/root/registry_secret'
        target: "{{ ansible_user_dir }}/registry_secret"

      - source: '/root/uploader_key'
        target: "{{ ansible_user_dir }}/.ssh/id_rsa"
  when: not setup_staging

- name: Fix owners of the files
  file:
    path: '{{ item }}'
    mode: '0600'
    owner: "{{ ansible_user_id }}"
    group: "{{ ansible_real_group_id }}"
  with_items:
      - "{{ ansible_user_dir }}/dlrnapi_secret"
      - "{{ ansible_user_dir }}/registry_secret"
      - "{{ ansible_user_dir }}/.ssh/id_rsa"
  when: not setup_staging

# Ci-config repo handling
# We have three execution environments: zuul when checking changes, local when
# running local test iteration, and standalone when this role run to actually
# provision a real server
- name: Understand from where to take the ci-config
  become: true
  become_user: "{{ ansible_user_id }}"
  block:
    - name: Check for presence of repo on the node
      stat:
        path: "{{ ci_config_remote_src_dir }}"
      register: ci_config_src_dir_stat

    - name: Check for presence of repo on local machine
      stat:
        path: "{{ ci_config_local_src_dir }}"
      register: ci_config_src_dir_stat
      delegate_to: localhost

    - name: When dir is not present on the node, or locally, clone from git
      git:
        repo: 'https://review.rdoproject.org/r/p/rdo-infra/ci-config.git'
        dest: "{{ ansible_user_dir }}/ci-config"
      when:
        - not ci_config_remote_src_dir_stat.stat.exist
        - not ci_config_local_src_dir_stat.stat.exist

    - name: When dir is present on the node, just use it.
      debug:
        msg: ci-config is already present in the host, nothing to clone
      when:
        - ci_config_remote_src_dir_stat.stat.exist

    - name: when dir is present locally but not remote, synchronize it
      synchronize:
        src: "{{ ci_config_local_src_dir  }}"
        dest: "{{ ci_config_remote_src_dir  }}"
      when:
        - not ci_config_remote_src_dir_stat.stat.exists
        - ci_config_local_src_dir_stat.stat.exists

    - name: Make sure .ssh dir exists
      file:
        path: "{{ ansible_user_dir }}/.ssh"
        state: directory
        mode: '0700'


    
    - name: Generate public key from private key for uploader user
      shell: >
        ssh-keygen -y -t rsa -N '' -f ~/.ssh/id_rsa > ~/.ssh/id_rsa.pub
      args:
        creates: "{{ ansible_user_dir }}/.ssh/id_rsa.pub"


    - name: Create a virtualenv for the promoter script
      pip:
        requirements: "{{ ci_config_src_dir|default('~/ci-config') }}/ci-scripts/dlrnapi_promoter/requirements.txt"
        virtualenv: ~/promoter_venv

- name: Install promoter service
  copy:
    src: dlrn-promoter.service
    dest: /etc/systemd/system/
    mode: '0644'
    owner: 'root'
    group: 'root'
  become: true

- name: Start and enable promoter
  service:
    name: dlrn-promoter
    state: started
    enabled: yes
  become: true

- block:
    - name: Configure telegraf to report to rrcockpit
      blockinfile:
        path: /etc/telegraf/telegraf.conf
        marker: "# -- {mark} ANSIBLE MANAGED BLOCK --"
        block: |
          [[outputs.influxdb]]
          urls = ['http://{{ rrcockpit_internal_network_ip }}:8086']
      become: true

    - name: Configure dlrn-promoter at telegraf
      copy:
        src: dlrn-promoter.telegraf.conf
        dest: /etc/telegraf/telegraf.d/dlrn-promoter.conf
        mode: '0644'
        owner: 'root'
        group: 'root'
      register: dlrn_promoter_telegram

    - name: Configure disk at telegraf
      copy:
        src: disk.telegraf.conf
        dest: /etc/telegraf/telegraf.d/disk.conf
        mode: '0644'
        owner: 'root'
        group: 'root'
      register: disk_telegram

    - name: Start and enable telegraf
      service:
        name: telegraf
        state: restarted
        enabled: yes
      when: dlrn_promoter_telegram.changed or disk_telegram.changed
  become: true
