---
- name: Ensure promoter user exists
  become: true
  user:
    name: "{{ promoter_user }}"
    system: true
    create_home: true

# Repos and packages
#

- name: EPEL Packages
  become: true
  block:
    # Install EPEL so we can get ansible 2.8 on centos7
    # and python3
    - name:  install epel
      package:
        name: epel-release
        state: present

    - name: Enable epel
      command: yum-config-manager --enable epel
      args:
        warn: false

    - name: Install epel packages
      package:
        name: "{{ item }}"
        state: present
      loop:
        - python36-virtualenv
        - python36-docker
  when: ansible_distribution_major_version|int == 7

- name: Packages install
  become: true
  block:
    - name: Install influxdb repo to get telegraf
      yum_repository:
        name: influxdb
        description: InfluxDB Repository - RHEL \$releasever
        baseurl: https://repos.influxdata.com/rhel/\$releasever/\$basearch/stable
        enabled: yes
        gpgcheck: yes
        gpgkey: https://repos.influxdata.com/influxdb.key

    - name: Install py3 packages
      yum:
        name:
          - python3-virtualenv
          - python3-docker
        state: present
      when: ansible_distribution_major_version|int >= 8

    - name: Install required packages
      yum:
        name:
          - logrotate
          - httpd
          - telegraf
          - yum-utils
          - device-mapper-persistent-data
          - lvm2
          - openssh
          - git
          - parted
          - parted
          - xfsprogs
          - policycoreutils
          - setools-console
          - ansible
          - libselinux-python3
        state: present

    - name: setup docker
      include_tasks: ensure_docker.yml

#
# Promoter logs and httpd service setup
#

- name: Fix home directory permissions
  become: true
  become_user: "{{ promoter_user }}"
  file:
    path: "/home/{{ promoter_user }}"
    mode: 0755

- name: Create a directory for the promoter logs
  become: true
  become_user: "{{ promoter_user }}"
  file:
    path: "/home/{{ promoter_user }}/promoter_logs"
    state: directory
    setype: httpd_sys_content_t
    owner: "{{ promoter_user }}"

- name: copy logrotate selinux policy
  become: true
  copy:
    src: logrotate-promoter.te
    dest: /tmp/logrotate-promoter.te
  register: policy

- name: compile and permanently install policy
  become: true
  shell: |
      checkmodule -M -m -o /tmp/logrotate-promoter.mod /tmp/logrotate-promoter.te
      semodule_package -m /tmp/logrotate-promoter.mod -o /tmp/logrotate-promoter.pp
      semodule -i /tmp/logrotate-promoter.pp
      rm -f /tmp/logrotate-promoter.pp /tmp/logrotate-promoter.mod
  when: policy is changed

- name: add configuration for the log rotation
  copy:
    content: |
        /home/{{ promoter_user }}/promoter_logs/*.log {
            daily
            missingok
            su {{ promoter_user }} {{ promoter_user }}
            dateext
            dateyesterday
            notifempty
            delaycompress
            rotate 60
        }
    dest: /etc/logrotate.d/promoter
    owner: root
    group: root
    mode: 0644
  become: true


#
# Apache setup (expose log)
#
- name: Disable the default welcome page
  copy:
    content: ''
    dest: '/etc/httpd/conf.d/welcome.conf'
    backup: yes
  become: true

- name: Add config file for Apache to expose the logs
  blockinfile:
    path: '/etc/httpd/conf.d/promoter_logs.conf'
    create: yes
    block: |
      <VirtualHost *:80>
          ServerAdmin rdo-ci-admins@redhat.com
          DocumentRoot /home/{{ promoter_user }}/promoter_logs

          <Directory /home/{{ promoter_user }}/promoter_logs>
              Options Indexes MultiViews
              AllowOverride None
              Require all granted
          </Directory>
      </VirtualHost>
  register: apache_config
  become: true

- name: Start and enable Apache
  service:
    name: httpd
    state: restarted
    enabled: yes
  become: true
  when: apache_config is changed

#
# Credential prepare
#
- name: Make sure .ssh dir exists
  become: true
  become_user: "{{ promoter_user }}"
  file:
    path: "/home/{{ promoter_user }}/.ssh"
    state: directory
    mode: '0700'

#
# No credentials are handled in this part of the role
# Credentials are setup at instance creation time by cloud-init
# Continuous delivery doens't handle credentials at all, and credentials
# modification usually doesn't involve launching a whol provisioning role.
#

# in CD mode, this part of the role will at least keep these files
# restricted.

# If it's a deploy of the server to the cloud, need to copy secrets from /root


- name: Check if secrets are in root
  become: true
  stat:
    path: "{{ item }}"
  loop:
    - "{{ provision_path_dlrnapi_secret_default }}"
    - "{{ provision_path_registry_secret_default }}"
    - "{{ provision_path_uploader_key_default }}"
  register: root_result

- name: Check if secrets are in user directory place
  become: true
  become_user: "{{ promoter_user }}"
  stat:
    path: "{{ item }}"
  loop:
    - "{{ remote_path_dlrnapi_secret }}"
    - "{{ remote_path_registry_secret }}"
    - "{{ remote_path_uploader_key }}"
  register: user_result

- name: Print what will be copied and where
  debug: msg="Copying {{ item.0.item }} to {{ item.1.item }} "
  loop: "{{ root_result.results | zip(user_result.results) | list }}"
  when: item.0.stat.exists|bool and not item.1.stat.exists|bool

- name: Copy root credentials to user directory if need
  become: true
  copy:
    src: "{{ item.0.item }}"
    dest: "{{ item.1.item }}"
    remote_src: true
  loop: "{{ root_result.results | zip(user_result.results) | list }}"
  when: item.0.stat.exists|bool and not item.1.stat.exists|bool

- block:
    - name: Fix owners of the files
      become: true
      file:
        path: '{{ item }}'
        mode: '0600'
        owner: "{{ promoter_user }}"
      with_items:
          - "{{ remote_path_dlrnapi_secret  }}"
          - "{{ remote_path_registry_secret  }}"
          - "{{ remote_path_uploader_key  }}"
  rescue:
    - name: Possible Failure explanation
      debug:
        msg: Credentials ownership fix failed, probably a first run

#
# Ci-config repo handling
#
- name: Check for presence of repo on local machine
  become: false
  stat:
    path: "{{ ci_config_local_src_dir }}"
  register: ci_config_local_src_dir_stat
  delegate_to: localhost

- name: Check for presence of repo on server
  stat:
    path: "{{ ci_config_remote_src_dir }}"
  register: ci_config_remote_src_dir_stat

#
# Clone ci-config repo
#
- name: Understand from where to take the ci-config
  become: true
  become_user: "{{ promoter_user }}"
  block:

    - name: clone promoter dir from local dir if present
      synchronize:
        src: "{{ ci_config_local_src_dir }}/"
        dest: "{{ ci_config_remote_src_dir }}"
        owner: false  # will use promoter_user due to become_user
        rsync_opts:
            - "--no-motd"
            - "--exclude=.tox"
            # avoid spamming our logs
            - "--quiet"
      when: ci_config_local_src_dir_stat.stat.exists

    - name: When dir is not present on the node, or locally, clone from git
      git:  # noqa 401
        repo: 'https://review.rdoproject.org/r/p/rdo-infra/ci-config.git'
        dest: "{{ ci_config_remote_src_dir }}"
      when:
        - not ci_config_local_src_dir_stat.stat.exists
        - not ci_config_remote_src_dir_stat.stat.exists

#
# Promoter preparation
#
- name: Create a virtualenv for the promoter script
  become: true
  become_user: "{{ promoter_user }}"
  pip:
    requirements: "{{ ci_config_remote_src_dir }}/ci-scripts/dlrnapi_promoter/requirements.txt"
    virtualenv: "/home/{{ promoter_user }}/{{ promoter_virtualenv }}"
    virtualenv_command: "/usr/bin/python3 -m venv"

- name: Render promoter service script
  template:
    src: "dlrn-promoter-service.sh.j2"
    dest: "{{ ci_config_remote_src_dir }}/ci-scripts/dlrnapi_promoter/dlrn-promoter-service.sh"
    mode: '0755'
    owner: 'root'
    group: 'root'
  become: true

- name: Install promoter service
  template:
    src: dlrn-promoter.service.j2
    dest: /etc/systemd/system/dlrn-promoter.service
    mode: '0644'
    owner: 'root'
    group: 'root'
  become: true

# In staging setup the service file is a dumbed down version
# and we can start it to check that at least part of the syntax
# is ok
- name: Start and enable promoter
  systemd:
    name: dlrn-promoter
    state: started
    daemon_reload: yes
    enabled: yes
  become: true

#
# Monitoring setup
#
- block:
    - name: Configure telegraf to report to rrcockpit
      blockinfile:
        path: /etc/telegraf/telegraf.conf
        marker: "# -- {mark} ANSIBLE MANAGED BLOCK --"
        block: |
          [[outputs.influxdb]]
          urls = ['http://{{ rrcockpit_internal_network_ip }}:8086']
      become: true

    - name: Configure dlrn-promoter at telegraf
      copy:
        src: dlrn-promoter.telegraf.conf
        dest: /etc/telegraf/telegraf.d/dlrn-promoter.conf
        mode: '0644'
        owner: 'root'
        group: 'root'
      register: dlrn_promoter_telegram

    - name: Configure disk at telegraf
      copy:
        src: disk.telegraf.conf
        dest: /etc/telegraf/telegraf.d/disk.conf
        mode: '0644'
        owner: 'root'
        group: 'root'
      register: disk_telegram

    - name: Start and enable telegraf
      service:
        name: telegraf
        state: restarted
        enabled: yes
      when:
        - not setup_staging
        - dlrn_promoter_telegram.changed or disk_telegram.changed
  become: true
