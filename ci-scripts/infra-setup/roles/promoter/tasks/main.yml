# This role is meant to run in 3 different environments:
#  STANDALONE, ZUUL, and MOLECULE
#
# - STANDALONE (production promoter server in real host or vm)
#   should be run only after merging tested code, to actually provision the real server
#   with continuous deployment afterwards. RUNS THE ROLE AS ROOT
# - ZUUL ci job in staging promoter (nodepool node)
#   watch the test in your ci job
# - MOLECULE testing (local docker driver)
#   test and iterate over it before submitting changes
#   This environment should be taken into consideration, but major
#   task for it should be added in the molecule playbooks directly
#   and not here
#
#   ALL refers to all environments above

#
# Repos and packages
#

- name: Packages
  become: true
  block:
    - name: Configure docker-ce repo
      command: yum-config-manager --add-repo \
          https://download.docker.com/linux/centos/docker-ce.repo

    - name: Install influxdb repo to get telegraf
      yum_repository:
        name: influxdb
        description: InfluxDB Repository - RHEL \$releasever
        baseurl: https://repos.influxdata.com/rhel/\$releasever/\$basearch/stable
        enabled: yes
        gpgcheck: yes
        gpgkey: https://repos.influxdata.com/influxdb.key

    - name: Removed old/distro version of docker
      yum:
        name:
          - docker
          - docker-client
          - docker-client-latest
          - docker-common
          - docker-latest
          - docker-latest-logrotate
          - docker-logrotate
          - docker-engine
        state: absent

    - name: Install required packages
      yum:
        name:
          - logrotate
          - httpd
          - python-virtualenv
          - telegraf
          - yum-utils
          - device-mapper-persistent-data
          - lvm2
          - openssh
          - git
          - parted
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - parted
          - xfsprogs
          - policycoreutils
          - setools-console
        state: present

- name: Set up external partition
  become: true
  block:
    - name: Mount external volume - create a partition
      parted:
        device: "{{ docker_device }}"
        number: 1
        state: present

    - name: Be sure to reread partition table
      command: kpartx -a "{{ docker_device }}"
      when: setup_staging

    - name: Mount external volume - create a filesystem
      filesystem:
        fstype: xfs
        dev: "{{ docker_partition }}"

    - name: create a mount folder
      file:
        path: /var/lib/docker
        state: directory

    - name: Mount external volume - mount the partition
      mount:
        path: /var/lib/docker
        src: "{{ docker_partition }}"
        fstype: xfs
        state: mounted

#
# Docker configuration
#
- name: Configure Docker
  become: true
  block:
    - name: Ensure docker dir exists
      file:
        path: /etc/docker
        state: directory

    - name: Configure overlay2 for docker
      copy:
        content: |
          {
              "storage-driver": "overlay2",
              "storage-opts": [
                "overlay2.override_kernel_check=true"
              ]
          }
        dest: /etc/docker/daemon.json
      become: true
      register: docker_config

- name: Reload, enable and start docker
  when: not molecule_testing
  become: true
  block:
    - name: Reload docker if config was changed
      service:
        name: docker
        state: reloaded
      when: docker_config is changed

    - name: Start and enable Docker
      service:
        name: docker
        state: started
        enabled: yes

- name: Create user config dir
  file:
    path: /home/{{ promoter_user }}/.docker/
    state: directory

- name: Enable experimental commands in user config
  copy:
    content: |
      {
          "experimental": "enabled"
      }
    dest: /home/{{ promoter_user }}/.docker/config.json


#
# Promoter logs and httpd service setup
#

- name: Fix home directory permissions
  file:
    path: "/home/{{ promoter_user }}"
    mode: 0755

- name: Create a directory for the promoter logs
  file:
    path: "/home/{{ promoter_user }}/promoter_logs"
    state: directory
    setype: httpd_sys_content_t
    owner: "{{ promoter_user }}"

- name: copy logrotate selinux policy
  copy:
    src: logrotate-promoter.te
    dest: /tmp/logrotate-promoter.te
  register: policy

- name: compile and permanently install policy
  shell: |
      checkmodule -M -m -o /tmp/logrotate-promoter.mod /tmp/logrotate-promoter.te
      semodule_package -m /tmp/logrotate-promoter.mod -o /tmp/logrotate-promoter.pp
      semodule -i /tmp/logrotate-promoter.pp
      rm -f /tmp/logrotate-promoter.pp /tmp/logrotate-promoter.mod
  when: policy|changed

- name: add configuration for the log rotation
  copy:
    content: |
        /home/{{ promoter_user }}/promoter_logs/*.log {
            daily
            missingok
            su {{ promoter_user }} {{ promoter_user }}
            dateext
            dateyesterday
            notifempty
            delaycompress
            rotate 60
        }
    dest: /etc/logrotate.d/promoter
    owner: root
    group: root
    mode: 0644
  become: true


#
# Apache setup (expose log)
#
- name: Disable the default welcome page
  copy:
    content: ''
    dest: '/etc/httpd/conf.d/welcome.conf'
    backup: yes
  become: true

- name: Add config file for Apache to expose the logs
  blockinfile:
    path: '/etc/httpd/conf.d/promoter_logs.conf'
    create: yes
    block: |
      <VirtualHost *:80>
          ServerAdmin rdo-ci-admins@redhat.com
          DocumentRoot /home/{{ promoter_user }}/promoter_logs

          <Directory /home/{{ promoter_user }}/promoter_logs>
              Options Indexes MultiViews
              AllowOverride None
              Require all granted
          </Directory>
      </VirtualHost>
  register: apache_config
  become: true

- name: Start and enable Apache
  service:
    name: httpd
    state: restarted
    enabled: yes
  become: true
  when: apache_config|changed


#
# Credential prepare
#
- name: Make sure .ssh dir exists
  file:
    path: "/home/{{ promoter_user }}/.ssh"
    state: directory
    mode: '0700'

#
# Credentials setup
#
- name: Stat for local credentials
  block:
    - name: Stat for local dlrnapi secrets file
      stat:
        path: "{{ local_path_dlrnapi_secret }}"
      register: dlrnapi_secret_local
      delegate_to: localhost

    - name: Stat for local registry secrets file
      stat:
        path: "{{ local_path_registry_secret }}"
      register: registry_secret_local
      delegate_to: localhost

    - name: Stat for uploader_key file
      stat:
        path: "{{ local_path_uploader_key }}"
      register: uploader_key_local
      delegate_to: localhost

- name: Handle credentials for standalone environment
  when:
    - dlrnapi_secret_local.stat.exists
    - registry_secret_local.stat.exists
    - uploader_key_local.stat.exists
  block:
    - copy:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
      with_items:
        - src: "{{ local_path_dlrnapi_secret }}"
          dest: "{{ remote_path_dlrnapi_secret }}"
        - src: "{{ local_path_registry_secret }}"
          dest: "{{ remote_path_registry_secret }}"
        - src: "{{ local_path_uploader_key }}"
          dest: "{{ remote_path_uploader_key }}"

    - name: Change key file permission
      file:
        path: "{{ remote_path_uploader_key }}"
        mode: 0600

    - name: Generate public key from private key for uploader user
      shell: >
        ssh-keygen -y -t rsa -q -C '' -N '' -f {{ remote_path_uploader_key }} > {{ remote_path_uploader_key }}.pub
      args:
        creates: "{{ remote_path_uploader_key }}.pub"

#
# Credentials check (ALL)
#
- name: Stat for dlrnapi secrets file on server
  stat:
    path: "{{ remote_path_dlrnapi_secret }}"
  register: remote_dlrnapi_secret

- name: Stat for registry secrets file on server
  stat:
    path: "{{ remote_path_registry_secret }}"
  register: remote_registry_secret

- name: Stat for uploader_key
  stat:
    path: "{{ remote_path_uploader_key }}"
  register: remote_uploader_key

- name: Check if we have any credential to use.
  assert:
    that: >
      remote_dlrnapi_secret.stat.exists
      or remote_registry_secret.stat.exists
      or remote_uploader_key.stat.exists
    fail_msg: Credentials are missing, installation cannot continue
    success_msg: All credentials present

- name: Fix owners of the files
  file:
    path: '{{ item }}'
    mode: '0600'
    owner: "{{ promoter_user }}"
  with_items:
      - "{{ remote_path_dlrnapi_secret  }}"
      - "{{ remote_path_registry_secret  }}"
      - "{{ remote_path_uploader_key  }}"

#
# Ci-config repo handling
#
- name: Check for presence of repo on local machine
  stat:
    path: "{{ ci_config_local_src_dir }}"
  register: ci_config_local_src_dir_stat
  delegate_to: localhost

- name: Check for presence of repo on server
  stat:
    path: "{{ ci_config_remote_src_dir }}"
  register: ci_config_remote_src_dir_stat

#
# Clone ci-config repo
#
- name: Understand from where to take the ci-config
  become: true
  become_user: "{{ promoter_user }}"
  block:

    - name: clone promoter dir from local dir if present
      synchronize:
        src: "{{ ci_config_local_src_dir }}/"
        dest: "{{ ci_config_remote_src_dir }}"
        rsync_opts:
            - "--no-motd"
            - "--exclude=.tox"
      when: ci_config_local_src_dir_stat.stat.exists

    - name: When dir is not present on the node, or locally, clone from git
      git:
        repo: 'https://review.rdoproject.org/r/p/rdo-infra/ci-config.git'
        dest: "{{ ci_config_remote_src_dir }}"
      when:
        - not ci_config_local_src_dir_stat.stat.exists
        - not ci_config_remote_src_dir_stat.stat.exists

#
# Promoter preparation
#

- name: Create a virtualenv for the promoter script
  become: true
  become_user: "{{ promoter_user }}"
  pip:
    requirements: "{{ ci_config_remote_src_dir }}/ci-scripts/dlrnapi_promoter/requirements.txt"
    virtualenv: ~/promoter_venv

- name: Render promoter service script
  template:
    src: "dlrn-promoter-service.sh.j2"
    dest: "{{ ci_config_remote_src_dir }}/ci-scripts/dlrnapi_promoter/dlrn-promoter-service.sh"
    mode: '0755'
    owner: 'root'
    group: 'root'
  become: true

- name: Install promoter service
  copy:
    src: dlrn-promoter.service
    dest: /etc/systemd/system/
    mode: '0644'
    owner: 'root'
    group: 'root'
  become: true

- name: Start and enable promoter
  service:
    name: dlrn-promoter
    state: started
    enabled: yes
  become: true
  when: not setup_staging

#
# Monitoring setup
#
- block:
    - name: Configure telegraf to report to rrcockpit
      blockinfile:
        path: /etc/telegraf/telegraf.conf
        marker: "# -- {mark} ANSIBLE MANAGED BLOCK --"
        block: |
          [[outputs.influxdb]]
          urls = ['http://{{ rrcockpit_internal_network_ip }}:8086']
      become: true

    - name: Configure dlrn-promoter at telegraf
      copy:
        src: dlrn-promoter.telegraf.conf
        dest: /etc/telegraf/telegraf.d/dlrn-promoter.conf
        mode: '0644'
        owner: 'root'
        group: 'root'
      register: dlrn_promoter_telegram

    - name: Configure disk at telegraf
      copy:
        src: disk.telegraf.conf
        dest: /etc/telegraf/telegraf.d/disk.conf
        mode: '0644'
        owner: 'root'
        group: 'root'
      register: disk_telegram

    - name: Start and enable telegraf
      service:
        name: telegraf
        state: restarted
        enabled: yes
      when:
        - not setup_staging
        - dlrn_promoter_telegram.changed or disk_telegram.changed
  become: true
