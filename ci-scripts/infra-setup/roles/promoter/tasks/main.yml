---
#
# User setup
#
- name: Ensure promoter user exists
  become: true
  user:
    name: "{{ promoter_user }}"
    system: true
    create_home: true

- name: Fix home directory permissions
  become: true
  become_user: "{{ promoter_user }}"
  file:
    path: "/home/{{ promoter_user }}"
    mode: 0755

#
# Install system packages
#
- name: Repos and packages
  include_tasks: install_packages.yml

#
# Configure docker
#
- name: Setup docker
  include_tasks: ensure_docker.yml

#
# Promoter logs and httpd service setup
#
- name: Create a directory for the promoter logs
  become: true
  become_user: "{{ promoter_user }}"
  file:
    path: "{{ item }}"
    state: directory
    setype: httpd_sys_content_t
    owner: "{{ promoter_user }}"
  with_items:
    - "~/web/promoter_logs"
    - "~/web/config"
    - "~/web/promoter_logs/container-push"

- name: copy logrotate selinux policy
  become: true
  copy:
    src: logrotate-promoter.te
    dest: /tmp/logrotate-promoter.te
  register: policy

- name: compile and permanently install policy
  become: true
  shell: |
      checkmodule -M -m -o /tmp/logrotate-promoter.mod /tmp/logrotate-promoter.te
      semodule_package -m /tmp/logrotate-promoter.mod -o /tmp/logrotate-promoter.pp
      semodule -i /tmp/logrotate-promoter.pp
      rm -f /tmp/logrotate-promoter.pp /tmp/logrotate-promoter.mod
  when: policy is changed

- name: add configuration for the log rotation
  copy:
    content: |
        /home/{{ promoter_user }}/{{ promoter_logs }}/*.log {
            daily
            missingok
            su {{ promoter_user }} {{ promoter_user }}
            dateext
            dateyesterday
            notifempty
            delaycompress
            rotate 60
        }
    dest: /etc/logrotate.d/promoter
    owner: root
    group: root
    mode: 0644
  become: true

#
# Apache setup (expose log)
#
- name: Disable the default welcome page
  copy:
    content: ''
    dest: '/etc/httpd/conf.d/welcome.conf'
    backup: yes
  become: true

- name: Add config file for Apache to expose the logs
  blockinfile:
    path: '/etc/httpd/conf.d/promoter_logs.conf'
    create: yes
    block: |
      <VirtualHost *:80>
          ServerAdmin rdo-ci-admins@redhat.com
          DocumentRoot /home/{{ promoter_user }}/web

          <Directory /home/{{ promoter_user }}/web>
              Options Indexes MultiViews
              AllowOverride None
              Require all granted
          </Directory>
      </VirtualHost>

      <VirtualHost *:80>
          ServerAdmin rdo-ci-admins@redhat.com
          DocumentRoot " /home/{{ promoter_user }}/web/config"
          ServerPath "/config/"
          RewriteEngine On
          RewriteRule "^(/config/.*)" "/home/{{ promoter_user }}/web$"
      </VirtualHost>

      <VirtualHost *:80>
          ServerAdmin rdo-ci-admins@redhat.com
          DocumentRoot "/home/{{ promoter_user }}/{{ promoter_logs }}"
          ServerPath "/promoter_logs/"
          RewriteEngine On
          RewriteRule "^(/promoter_logs/.*)" "/home/{{ promoter_user }}/web$"
      </VirtualHost>

  register: apache_config
  become: true

- name: Start and enable Apache
  service:
    name: httpd
    state: restarted
    enabled: yes
  become: true
  when: apache_config is changed

#
# Credentials check
#
- name: Check if secrets are in remote path
  become: true
  become_user: "{{ promoter_user }}"
  stat:
    path: "{{ item }}"
  loop:
    - "{{ remote_path_dlrnapi_secret }}"
    - "{{ remote_path_registry_secret }}"
    - "{{ remote_path_uploader_key }}"
  register: creds

- name: Print available credentials
  debug: msg="Success! {{ item.item }} has been found :)"
  loop: "{{ creds.results }}"
  when: item.stat.exists|bool

- name: Fail if missing credentials
  fail: msg="FATAL FAILURE! {{ item.item }} is missing :("
  loop: "{{ creds.results }}"
  when: not item.stat.exists|bool

#
# Clone ci-config repo
#

- name: clone promoter dir from local dir if present
  become: true
  become_user: "{{ promoter_user }}"
  synchronize:
    src: "{{ ci_config_local_src_dir }}/"
    dest: "{{ ci_config_remote_src_dir }}"
    owner: false  # will use promoter_user due to become_user
    rsync_opts:
        - "--no-motd"
        - "--exclude=.tox"
        # avoid spamming our logs
        - "--quiet"

#
# Promoter preparation
#

- name: Create a virtualenv for the promoter script
  become: true
  become_user: "{{ promoter_user }}"
  pip:
    name: "pip>=19.1.1"
    virtualenv: "/home/{{ promoter_user }}/{{ promoter_virtualenv }}"
    virtualenv_command: "/usr/bin/python3 -m venv"

- name: "Install requirements from requirements.txt"
  become: true
  become_user: "{{ promoter_user }}"
  pip:
    requirements: "{{ ci_config_remote_src_dir }}/ci-scripts/dlrnapi_promoter/requirements.txt"
    virtualenv: "/home/{{ promoter_user }}/{{ promoter_virtualenv }}"
    virtualenv_command: "/usr/bin/python3 -m venv"

- name: Render promoter service script
  template:
    src: "dlrn-promoter-service.sh.j2"
    dest: "{{ ci_config_remote_src_dir }}/ci-scripts/dlrnapi_promoter/dlrn-promoter-service.sh"
    mode: '0755'
    owner: 'root'
    group: 'root'
  become: true

- name: 'Set env variable for promoter_config_root {{ promoter_config_root }}'
  lineinfile:
    dest: /etc/environment
    state: present
    regexp: '^PROMOTER_CONFIG_ROOT'
    line: 'PROMOTER_CONFIG_ROOT={{ promoter_config_root }}'
  become: true

- name: Install promoter service
  template:
    src: dlrn-promoter.service.j2
    dest: /etc/systemd/system/dlrn-promoter.service
    mode: '0644'
    owner: 'root'
    group: 'root'
  become: true

- name: Start and enable promoter
  systemd:
    name: dlrn-promoter
    state: started
    daemon_reload: yes
    enabled: yes
  become: true

#
# Monitoring setup
#
- block:
    - name: Configure telegraf to report to rrcockpit
      blockinfile:
        path: /etc/telegraf/telegraf.conf
        marker: "# -- {mark} ANSIBLE MANAGED BLOCK --"
        block: |
          [[outputs.influxdb]]
          urls = ['http://{{ rrcockpit_internal_network_ip }}:8086']
      become: true

    - name: Configure dlrn-promoter at telegraf
      copy:
        src: dlrn-promoter.telegraf.conf
        dest: /etc/telegraf/telegraf.d/dlrn-promoter.conf
        mode: '0644'
        owner: 'root'
        group: 'root'
      register: dlrn_promoter_telegram

    - name: Configure disk at telegraf
      copy:
        src: disk.telegraf.conf
        dest: /etc/telegraf/telegraf.d/disk.conf
        mode: '0644'
        owner: 'root'
        group: 'root'
      register: disk_telegram

    - name: Start and enable telegraf
      service:
        name: telegraf
        state: restarted
        enabled: yes
      when:
        - not setup_staging
        - dlrn_promoter_telegram.changed or disk_telegram.changed
  become: true
