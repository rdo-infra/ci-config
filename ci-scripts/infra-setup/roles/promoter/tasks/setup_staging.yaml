---
# This is very useful while developing the staging environment locally
# as it will always clone your latest change to the server
- name: clone promoter dir in staging
  synchronize:
    src: "{{ ci_config_local_src_dir }}/"
    dest: "{{ ci_config_remote_src_dir }}"
    rsync_opts:
        # https://github.com/ansible/ansible/issues/25681
        - "--quiet"
        - "--no-motd"
        - "--exclude=.tox"

# Same as above, the test requirements are usually run only by tox
# so when we are testing, it's nice to have them in the same virtual env
- name: install test requirements
  become: true
  become_user: "{{ promoter_user }}"
  pip:
    requirements: "{{ ci_config_remote_src_dir }}/test-requirements.txt"
    virtualenv: "/home/{{ promoter_user }}/promoter_venv"
  tags:
    - staging_prepare

# Epel is needed to install uWSGI
# Sometimes the epel.repo file is removed even if the package is installed.
# So to get back the epel.repo file again we need to remove and install again.
- name: Install packages for staging env
  become: true
  block:
    # uWSGI is used to expose and daemonize the delorean API without the need
    # to run and configure an apache server
    # Alternatives are:
    #   flask run directly, but there is not support daemonization, so the result would be an hack
    #   gunicorn which is similar to uWSGI and doesn't require EPEL. I found gunicorn after uWSGI so we may
    #   test it and see if it's a more viable solution
    - name: install uwsgi
      become: true
      package:
        name:
          - uwsgi
          - uwsgi-plugin-python2
        state: present
      tags:
        - staging_prepare


# This block is the setup / run
- become: true
  become_user: "{{ promoter_user }}"
  block:
    - name: setup dlrn-server
      shell: |
        rm commits.sqlite
        source ~/promoter_venv/bin/activate
        pip install gunicorn
        promoter_venv/bin/gunicorn -w 4 -b 127.0.0.1:58080 dlrn.api:app  --log-level debug -D --log-file dlrnapi.log
        # This runs uWSGI server as a daemon to expose dlrn api
        # see https://uwsgi-docs.readthedocs.io/en/latest/ThingsToKnow.html for the post-buffering
        #/usr/sbin/uwsgi --http-socket 127.0.0.1:58080 --plugin python --manage-script-name --virtualenv promoter_venv/ \
        #      --logdate --log-sendfile --log-ioerror  --log-5xx --log-4xx \
        #      --post-buffering 65535 \
        #      --mount /=dlrn.api:app --daemonize ./dlrnapi.log
      args:
        chdir: "/home/{{ promoter_user }}"
        # Shut up ansible. We are not just using "rm" here
        warn: false

    - name: Wait until spawned uWSGI appeared in the log
      wait_for:
        path: "/home/{{ promoter_user }}/dlrnapi.log"
        search_regex: '4 workers'
        delay: 1
        sleep: 2
        timeout: 10

    - name: launch staging setup scripts
      shell: |
        source ~/promoter_venv/bin/activate
        # Export the path to the mounted docker socket so all docker client commands will use it
        if [ -S /tmp/docker.sock ]; then
            export DOCKER_HOST=unix:///tmp/docker.sock
            export DOCKER_OPTS="--insecure-registry localhost:{{ initial_registry['port'] }}"
        fi
        python {{ ci_config_remote_src_dir }}/ci-scripts/dlrnapi_promoter/tests/staging-setup/staging_environment.py setup
