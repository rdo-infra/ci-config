---
# This is very useful while developing the staging environment locally
# as it will always clone your latest change to the server
- name: clone promoter dir in staging
  synchronize:
    src: "{{ ci_config_local_src_dir }}/"
    dest: "{{ ci_config_remote_src_dir }}"
    rsync_opts:
        # https://github.com/ansible/ansible/issues/25681
        - "--quiet"
        - "--no-motd"
        - "--exclude=.tox"

# Same as above, the test requirements are usually run only by tox
# so when we are testing, it's nice to have them in the same virtual env
- name: install test requirements
  become: true
  pip:
    requirements: "{{ ci_config_remote_src_dir }}/test-requirements.txt"
    virtualenv: "/home/{{ promoter_user }}/promoter_venv"
  tags:
    - staging_prepare

# Epel is needed to install uWSGI
- name:  install epel
  become: true
  package:
    name: epel-release
  tags:
    - staging_prepare

# uWSGI is used to expose and daemonize the delorean API without the need
# to run and configure an apache server
# Alternatives are:
#   flask run directly, but there is not support daemonization, so the result would be an hack
#   gunicorn which is similar to uWSGI and doesn't require EPEL. I found gunicorn after uWSGI so we may
#   test it and see if it's a more viable solution
- name: install uwsgi
  become: true
  package:
    name:
      - uwsgi
      - uwsgi-plugin-python2
      - python-gunicorn
  tags:
    - staging_prepare

# Molecule docker driver it's the default and easiest provisioner to use
# unfortunately it has some limitations: you can't run docker daemon in it.
# so to test docker client actions we need to trick the client and the container itself.
# we are mounting the docker socket from the host to the container, but in a different
# location than default (it's a long story).
# So with the docker daemon mounted, the docker client can create containers in the host.
# Here we are getting the group from the socket file in the host, and adding the group to
# the user that is going to use the socket
# Sets up docker on docker socket
- name: Get docker socket group
  stat:
    path: /tmp/docker.sock
  register: docker_on_docker_socket
  tags:
    - staging_prepare

- name: Find out docker group name
  shell: |
    set -euo pipefail
    grep docker_{{ docker_on_docker_socket.stat.gid }} /etc/group | cut -d":" -f1 | head -1
  register: docker_group
  changed_when: false
  failed_when: false
  tags:
    - staging_prepare

- when: not docker_group.stdout
  block:
    - name: Create docker group
      become: true
      group:
        name: "docker_{{ docker_on_docker_socket.stat.gid }}"
        gid: "{{ docker_on_docker_socket.stat.gid }}"
        state: present
      tags:
        - staging_prepare
    - name: Storing new created docker group
      set_fact:
        docker_group:
          stdout: "docker_{{ docker_on_docker_socket.stat.gid }}"
      tags:
        - staging_prepare

- name: Check if user is in docker group
  command: "groups {{ promoter_user }}"
  register: user_groups
  changed_when: false
  tags:
    - staging_prepare

- when: "docker_group.stdout not in user_groups.stdout"
  block:
    - name: Add user to docker group
      become: true
      user:
        name: '{{ promoter_user }}'
        groups: '{{ docker_group.stdout }}'
        append: true
      register: groupadd
      tags:
        - staging_prepare

- name: Create staging containers
  when: docker_on_docker_socket.stat.exists
  become: true
  become_user: "{{ promoter_user }}"
  tags:
    - staging_prepare
  block:
    - name: create build dir
      file:
        path: /tmp/tempimage
        state: directory

    - name: create Dockerfile
      copy:
        content: |
          FROM scratch
          ADD nothing /
        dest: /tmp/tempimage/Dockerfile

    - name: Build tripleomaster/hello-worldtest image
      shell: |
        if [ -S /tmp/docker.sock ]; then
            export DOCKER_HOST=unix:///tmp/docker.sock
        fi
        cd /tmp/tempimage
        touch nothing
        docker build -t localhost:5000/tripleomaster/hello-world:cc26d47faedf3643237cfb494d001d1add50267c .
      register: build

# This block is the setup / run/ teardown
- become: true
  become_user: "{{ promoter_user }}"
  block:
    - name: setup dlrn-server
      shell: |
        #gunicorn dlrn.api:app --log-level debug --debug
        rm sqlite.commits
        # THis runs uWSGI server as a daemon to expose dlrn api
        uwsgi --http-socket 127.0.0.1:8080 --plugin python --manage-script-name --mount /=dlrn.api:app --daemonize ./dlrnapi.log
      args:
        chdir: "/home/{{ promoter_user }}"

    - name: launch staging setup scripts
      shell: |
        source ~/promoter_venv/bin/activate
        # Export the path to the mounted docker socket so all docker client commands will use it
        if [ -S /tmp/docker.sock ]; then
            export DOCKER_HOST=unix:///tmp/docker.sock
        fi
        python {{ ci_config_remote_src_dir }}/ci-scripts/dlrnapi_promoter/tests/staging-setup/staging_environment.py setup --env-id 12345

  always:
    - name: Cleanup
      shell: |
        killed=$(pkill -c uwsgi)
        echo "Killed $killed uWSGI process"
        echo "Purging db"
        rm sqlite.commits
        echo "cleaning up environment"
        source ~/promoter_venv/bin/activate
        if [ -S /tmp/docker.sock ]; then
            export DOCKER_HOST=unix:///tmp/docker.sock
        fi
        python {{ ci_config_remote_src_dir }}/ci-scripts/dlrnapi_promoter/tests/staging-setup/staging_environment.py teardown --env-id 12345
      args:
        chdir: "/home/{{ promoter_user }}"
      tags:
        - staging_cleanup
