---
- name: Install required packages
  package:
    name: '{{ item }}'
    state: present
  with_items: "{{ packages }}"

- name: Install python packages with pip
  pip:
    name: "{{ pip_modules }}"

- name: Install docker-compose package with pip
  pip:
    name: docker-compose
    version: 1.15.0

- name: Find out docker group name
  shell: |
    set -euo pipefail
    grep docker /etc/group | cut -d":" -f1 | head -1
  register: docker_group
  changed_when: false

- name: Check if user is in docker group
  command: "groups {{ username }}"
  register: user_groups
  changed_when: false

- when: "docker_group.stdout not in user_groups.stdout"
  block:

  - name: Add user to docker group
    user:
      name: '{{ username }}'
      groups: '{{ docker_group.stdout }}'
      append: yes
    register: groupadd

- name: Create docker configuration file
  copy:
    content: |
      {
      "live-restore": true,
      "group": "{{ docker_group.stdout }}",
      }
    dest: /etc/docker/daemon.json
  register: docker_config

- name: Reload docker if config was changed
  service:
    name: docker
    state: reloaded
  when: docker_config is changed

- name: Start and enable docker
  service:
    name: docker
    state: started
    enabled: yes

- name: Create logs dir in mount point of docker volume
  file:
    state: directory
    path: '{{ logs_http_path }}/logs/{{ item.name }}'
    owner: "{{ username }}"
  with_items: "{{ sova_config }}"

- name: Create logs dir in mount point of docker volume
  file:
    state: directory
    path: "{{ work_dir }}"
    mode: "o+x"

- name: Fix selinux
  shell: >
    set -euo pipefail;
    ls -Zd {{ logs_http_path }} |
    grep httpd_sys_content_t ||
    chcon -Rt httpd_sys_content_t {{ logs_http_path }}
  register: step
  changed_when: '"changing security context of" in step.stdout'

- become: yes
  become_user: "{{ username }}"
  block:

  - name: Create mount point for docker volume
    file:
      state: directory
      path: '{{ item.system_path }}'
    with_items: "{{ sova_config }}"

  - name: Check if Gerrit SSH key presents on remote host
    stat:
      path: '{{ gerrit_ssh_key }}'
    register: key

  - name: Alert if key doesn't present
    debug: msg="SSH key for Gerrit is not in {{ gerrit_ssh_key }}!"
    when: not key.stat.exists

  - name: Copy key to all branches
    copy:
      remote_src: yes
      src: '{{ gerrit_ssh_key }}'
      dest: '{{ item.system_path }}/robi_id_rsa'
    with_items: "{{ sova_config }}"
    when: key.stat.exists

  - name: Copy nginx config
    template:
      src: nginx.conf.j2
      dest: '{{ work_dir }}/nginx.conf'

  - name: Create docker-compose from template
    template:
      src: docker-compose.yml.j2
      dest: '{{ docker_compose_file }}'

  - name: Run docker-compose from repo
    docker_compose:
      project_src: '{{ work_dir }}'
      state: present
      pull: yes
