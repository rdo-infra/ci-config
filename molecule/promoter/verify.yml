---
- hosts: instance
  tags:
    - functional
  tasks:

    - name: Check podman version
      command: podman version --format {% raw %} '{{ .Client.Version }}' {% endraw %}
      register: podman_version
      failed_when: podman_version.stdout | length == 0
      changed_when: false

    - name: Ensure Podman version is recent enough
      assert:
        that: podman_version.stdout is version("4.2.0", ">=")
        success_msg: "Podman version installed in > 4.2.0"
        fail_msg: "Podman version installed is not recent enough"

    - name: Call podman manifest help
      become: true
      become_user: "{{ promoter_user }}"
      command: podman manifest --help
      register: podman_manifest
      changed_when: false

    - name: Ensure podman manifest command is enabled by default
      become: true
      become_user: "{{ promoter_user }}"
      assert:
        that: '"podman manifest is only supported on a Podman cli with experimental cli features enabled" not in podman_manifest.stderr'
        success_msg: "Podman manifest enabled by default"
        fail_msg: "Podman manifest command is present but not enabled by default"

    - name: Ensure influxdb repo is present and configured correctly
      become: true
      command: dnf repoinfo influxdb
      args:
        # shut up ansible. Dnf module doesn't offer repoinfo functionality as of 2.8
        warn: false
      changed_when: false

    # We can't run the daemon in molecule without virsh driver for now
    - name: Ensure podman deamon is using the overlay driver
      command: "podman info --format {% raw %} '{{ json .Driver  }}' {% endraw %}"
      failed_when: false
      changed_when: false

    - name: Attempt to use podman command as normal user
      become: true
      become_user: "{{ promoter_user }}"
      command: "podman info"
      register: podman_info_user
      changed_when: false

    - name: Ensure promoter user can access podman socket
      assert:
        that: '"permission denied" not in podman_info_user.stderr'
        fail_msg: "Promoter user can't use podman commands"
        success_msg: "Promoter user can correctly use podman"

    - name: Ensure we can access logs from apache
      become: true
      become_user: "{{ promoter_user }}"
      get_url:
        url: http://localhost/
        dest: "/home/{{ promoter_user }}/staging_promotion_index.html"

    - name: Dry run logrotation
      become: true
      command: logrotate -d /etc/logrotate.d/promoter
      register: logrotate_run
      changed_when: true

    - name: Ensure log rotation is configured properly
      assert:
        that: '"error:" not in logrotate_run.stderr'
        fail_msg: "Logrotate configuration file contains errors"
        success_msg: "Logrotate dry run completed successfully"

    - name: Ensure log rotation is taking the correct pattern
      assert:
        that: '"rotating pattern: /home/{{ promoter_user }}/{{ promoter_logs }}/*.log in logrotate_run.stderr"'
        fail_msg: "Rotatting pattern in rotation is wrong"
        success_msg: "Rotating pattern in rotation is correct"


    - name: Ensure selinux policy is installed
      shell: |
        set -euo pipefail
        semanage module -l | grep logrotate-promoter
      become: true
      changed_when: false

    - name: Ensure selinux policy for promoter is configured correctly
      debug:
        msg: Not Implemented

    - name: Ensure log rotation actually works
      debug:
        msg: Not Implemented

    - name: Stat public key
      become: true
      become_user: "{{ promoter_user }}"
      stat:
        path: "{{ remote_path_uploader_key }}.pub"
      register: uploader_public_key

    - name: Ensure we have uploader public key created and with correct permissions
      assert:
        that: uploader_public_key.stat.exists
        fail_msg: "Uploader public key not found"
        success_msg: "Uploader public key was correctly created"

    - name: Ensure promoter virtualenv is ready to be used
      become: true
      become_user: "{{ promoter_user }}"
      shell: |
        source ~/{{ promoter_virtualenv }}/bin/activate
        python --version
      changed_when: false

    # Quite difficult to test at the moment, we should be able to do
    # a rerun of the task that installs and enable a new service file
    # to check if a "deamon-reload needed" message is shown
    - name: Ensure daemon-reload is called if this is not a fresh run
      debug:
        msg: Not implemented

    - name: Ensure dlrn-promoter service unit file is correctly installed  # noqa 303
      become: true
      command: systemd-analyze verify dlrn-promoter.service
      changed_when: false

    - name: Ensure dlrn-promoter service is running  # noqa 303
      become: true
      command: systemctl status dlrn-promoter
      changed_when: false

    - name: Ensure monitoring service unit file is correctly installed
      become: true
      command: systemd-analyze verify telegraf.service
      changed_when: false

    # Not sure how to verify this
    - name: Ensure monitoring is enabled and working correctly
      debug:
        msg: Not Implemented
