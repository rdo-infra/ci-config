---
- hosts: instance
  tags:
    - functional
  tasks:

    - name: Check docker version
      command: docker version --format {% raw %} '{{ .Client.Version }}' {% endraw %}
      register: docker_version
      failed_when: docker_version.stdout | length == 0
      changed_when: false

    # Manifest command introduced in version 18.02.0
    - name: Ensure Docker version is recent enough
      assert:
        that: docker_version.stdout is version("18.02.0", ">")
        success_msg: "Docker version installed in > 18.02.0"
        fail_msg: "Docker version installed is not recent enough"

    - name: Call docker manifest help
      become: true
      become_user: "{{ promoter_user }}"
      command: docker manifest --help
      register: docker_manifest
      changed_when: false

    - name: Ensure docker manifest command is enabled by default
      become: true
      become_user: "{{ promoter_user }}"
      assert:
        that: '"docker manifest is only supported on a Docker cli with experimental cli features enabled" not in docker_manifest.stderr'
        success_msg: "Docker manifest enabled by default"
        fail_msg: "Docker manifest command is present but not enabled by default"

    - name: Ensure influxdb repo is present and configured correctly
      command: yum repoinfo influxdb
      args:
        # shut up ansible. Yum module doesn't offer repoinfo functionality as of 2.8
        warn: false
      changed_when: false

    - name: Ensure /var/lib/docker is from a different partition
      command: findmnt -P /var/lib/docker
      changed_when: false

    # We can't run the daemon in molecule without virsh driver for now
    - name: Ensure docker deamon is using the overlay driver
      command: "docker info --format {% raw %} '{{ json .Driver  }}' {% endraw %}"
      failed_when: false
      changed_when: false

    - name: Attempt to use docker command as normal user
      become: true
      become_user: "{{ promoter_user }}"
      command: "docker info"
      register: docker_info_user
      changed_when: false

    - name: Ensure promoter user can access docker socket
      assert:
        that: '"permission denied" not in docker_info_user.stderr'
        fail_msg: "Promoter user can't use docker commands"
        success_msg: "Promoter user can correctly use docker"

    - name: Ensure we can access logs from apache
      become: true
      become_user: "{{ promoter_user }}"
      get_url:
        url: http://localhost/
        dest: "/home/{{ promoter_user }}/staging_promotion_index.html"

    # Log rotation is very difficult to check. Even when configuration works and a forced run completes
    # successfully, a lot of time was spent in selinux policy configuaration, and the only way to check was
    # just "wait for it to fail"
    # Unless there's a way to run logorate with the exect selinux context, this is the only test we can launch right now
    - name: Dry run log rotation
      become: true
      command: logrotate -d /etc/logrotate.d/promoter
      register: logrotate_run
      changed_when: true

    - name: Ensure Log rotation is configured properly
      assert:
        that: '"error:" not in logrotate_run.stderr'
        fail_msg: "Logrotate configuration file contains errors"
        success_msg: "Logrotate dry run completed successfully"

    - name: Ensure Log rotation is taking the correct pattern
      assert:
        that: '"rotating pattern: /home/{{ promoter_user }}/promoter_logs/*.log" in logrotate_run.stderr'
        fail_msg: "Rotating pattern in rotation is wrong"
        success_msg: "Rotating pattern in rotation is correct"

    - name: Ensure selinux policy is installed
      shell: |
        set -euo pipefail
        semanage module -l | grep logrotate-promoter
      become: true
      changed_when: false

    - name: Ensure selinux policy for promoter is configured correctly
      debug:
        msg: Not Implemented

    - name: Ensure log rotation actually works
      debug:
        msg: Not Implemented

    - name: Stat public key
      become: true
      become_user: "{{ promoter_user }}"
      stat:
        path: "{{ remote_path_uploader_key }}.pub"
      register: uploader_public_key

    - name: Ensure we have uploader public key created and with correct permissions
      assert:
        that: uploader_public_key.stat.exists
        fail_msg: "Uploader public key not found"
        success_msg: "Uploader public key was correctly created"

    - name: Ensure role did not clone git from master
      block:

        - name: Retrieve master commit  # noqa 303
          shell: |
            git ls-remote https://github.com/rdo-infra/ci-config.git \
              | grep HEAD | awk '{ print $1 }'
          register: ci_config_commit_master

        - name: Retrieve actual commit from local ci-config  # noqa 303
          command: git rev-parse HEAD
          args:
            chdir: "{{ ci_config_remote_src_dir }}"
          register: ci_config_commit

        - name: Ensure commit is not master (@dev, make sure any change in test is committed)
          assert:
            that: ci_config_commit.stdout != ci_config_commit_master.stdout
            fail_msg: "No value in testing master commit in ci-config repo"
            success_msg: "Commit {{ ci_config_commit }} is being tested"

    - name: Ensure promoter virtualenv is ready to be used
      become: true
      become_user: "{{ promoter_user }}"
      shell: |
        source ~/{{ promoter_virtualenv }}/bin/activate
        python --version
      changed_when: false

    # Quite difficult to test at the moment, we should be able to do
    # a rerun of the task that installs and enable a new service file
    # to check if a "deamon-reload needed" message is shown
    - name: Ensure daemon-reload is called if this is not a fresh run
      debug:
        msg: Not implemented

    - name: Ensure dlrn-promoter service unit file is correctly installed  # noqa 303
      become: true
      command: systemd-analyze verify dlrn-promoter.service
      changed_when: false

    - name: Ensure dlrn-promoter service is running  # noqa 303
      become: true
      command: systemctl status dlrn-promoter
      changed_when: false

    - name: Ensure monitoring service unit file is correctly installed
      become: true
      command: systemd-analyze verify telegraf.service
      changed_when: false

    # Not sure how to verify this
    - name: Ensure monitoring is enabled and working correctly
      debug:
        msg: Not Implemented
