{% if logserver_ssl|bool %}
Listen 443 https

<VirtualHost *:443>
{% else %}
Listen 80

<VirtualHost *:80>
{% endif %}
  DocumentRoot /var/www/html
  ServerName {{ ansible_fqdn }}

{% if logserver_ssl|bool %}
  SSLEngine on
  SSLCertificateFile /etc/pki/tls/certs/localhost.crt
  SSLCertificateKeyFile /etc/pki/tls/private/localhost.key
{% endif %}

  # use Apache to compress the results afterwards, to save on the wire
  # it's approx 18x savings of wire traffic to compress. We need to
  # compress by content types that htmlify can produce
  AddOutputFilterByType DEFLATE text/plain text/html

  <FilesMatch \.html\.gz$>
    ForceType text/html
    AddDefaultCharset UTF-8
    AddEncoding x-gzip gz
  </FilesMatch>
  <Directory /var/www/cgi-bin/os-loganalyze>
    Allow from all
    Satisfy Any
  </Directory>

  RewriteEngine On
  # rewrite txt.gz & console.html[.gz] files to map to our internal htmlify
  # wsgi app
  # PT, Pass-through:  to come back around and get picked up by the
  #                    WSGIScriptAlias
  # NS, No-subrequest: on coming back through, mod-autoindex may have added
  #                    index.html which would match the !-f condition. We
  #                    therefore ensure the rewrite doesn't trigger by
  #                    disallowing subrequests.
  RewriteRule ^/(.*\.txt\.gz)$ /htmlify/$1 [QSA,L,PT,NS]
  RewriteRule ^/(.*console\.html(\.gz)?)$ /htmlify/$1 [QSA,L,PT,NS]

  # Check if the request exists as a file, directory or symbolic link
  # If not, write the request to htmlify to see if we can fetch from swift
  RewriteCond %{DOCUMENT_ROOT}%{REQUEST_FILENAME} !-f
  RewriteCond %{DOCUMENT_ROOT}%{REQUEST_FILENAME} !-d
  RewriteCond %{DOCUMENT_ROOT}%{REQUEST_FILENAME} !-l
  RewriteCond %{REQUEST_FILENAME} !^/icon
  RewriteRule ^/(.*)$ /htmlify/$1 [QSA,L,PT,NS]

  WSGIScriptAlias /htmlify /var/www/cgi-bin/os-loganalyze/os_loganalyze/wsgi.py
  LogLevel warn
  ServerSignature Off
</VirtualHost>
