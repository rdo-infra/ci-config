---
# This is very useful while developing the staging environment locally
# as it will always clone your latest change to the server
- name: clone promoter dir in staging
  synchronize:
    src: "{{ ci_config_local_src_dir }}/"
    dest: "{{ ci_config_remote_src_dir }}"
    rsync_opts:
        # https://github.com/ansible/ansible/issues/25681
        - "--quiet"
        - "--no-motd"
        - "--exclude=.tox"

- name: Install required packages
  yum:
    name: "@Development tools"
    state: present


# Same as above, the test requirements are usually run only by tox
# so when we are testing, it's nice to have them in the same virtual env
- name: install test requirements
  become: true
  become_user: "{{ promoter_user }}"
  pip:
    requirements: "{{ ci_config_remote_src_dir }}/test-requirements.txt"
    virtualenv: "/home/{{ promoter_user }}/promoter_venv"
    extra_args: -chttps://releases.openstack.org/constraints/upper/train
  tags:
    - staging_prepare

# This block is the setup / run
- become: true
  become_user: "{{ promoter_user }}"
  name: launch staging setup scripts
  changed_when: false
  shell: |
    source ~/promoter_venv/bin/activate
    # Export the path to the mounted docker socket so all docker client commands will use it
    if [ -S /tmp/docker.sock ]; then
        export DOCKER_HOST=unix:///tmp/docker.sock
        export DOCKER_OPTS="--insecure-registry localhost:{{ initial_registry['port'] }}"
    fi
    cd {{ ci_config_remote_src_dir }}
    python {{ ci_config_remote_src_dir }}/ci-scripts/dlrnapi_promoter/stage.py \
      setup \
      --db-data-file {{ pipeline_type }}-pipeline.yaml \
      --promoter-config-file staging/{{ test_release }}.ini
